<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 技術情報棚卸し(平日限定)]]></title>
  <link href="http://todoa2c.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://todoa2c.github.io/"/>
  <updated>2014-07-16T18:27:20+09:00</updated>
  <id>http://todoa2c.github.io/</id>
  <author>
    <name><![CDATA[Atsushi Kanaya (todoa2c)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MacでJavaのバージョンを切り替える方法]]></title>
    <link href="http://todoa2c.github.io/blog/2014/07/16/mac-java-switch-version/"/>
    <updated>2014-07-16T18:17:31+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/07/16/mac-java-switch-version</id>
    <content type="html"><![CDATA[<p><a href="http://www.ipa.go.jp/security/ciadr/vul/20140716-jre.html">Oracle Java の脆弱性対策について(CVE-2014-4227等)</a>
のアナウンスと共に、本脆弱性に対する修正プログラムがリリースされましたね。
※実際には修正プログラムが出る前に、脆弱性の報告が上がってしまって肝を冷やしましたが…</p>

<p>さて自分の開発環境のMacでもJDK 8 Update 11をインストールしたわけですが、
インストール後に<code>java -version</code> と打っても、今まで使っていたバージョン情報しか出なかったわけで、少し焦りました。</p>

<p>原因は、分かってしまえば何てことはなく、環境変数 <code>JAVA_HOME</code> の書き換えを忘れていた、というオチでした。</p>

<p>というわけで、環境変数を下記のように書き換えればOK。</p>

<p><code>
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_11.jdk/Contents/Home
</code></p>

<p>確認します。</p>

<p><code>
$ java -version
java version "1.8.0_11"
Java(TM) SE Runtime Environment (build 1.8.0_11-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)
</code></p>

<p>無事にバージョン切り替え完了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8リリース & java.util.streamのお勉強]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/20/java8-stream/"/>
    <updated>2014-03-20T18:45:15+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/20/java8-stream</id>
    <content type="html"><![CDATA[<p>ようやくJava 8がリリースされましたね。
正直Java飽きたと思っていたのですが、Java 8はかなり熱い機能が満載です。
特に関数型ちっくに書けるのは大きいですね。</p>

<p>とりあえず練習のため、1から100までに対するFizzBuzzを、今時点で知る限りの
Java 8の機能を使って書いてみました。</p>

<p>```
import java.util.stream.IntStream;</p>

<p>public class Main {</p>

<pre><code>public static String fizzbuzz(int x) {
    if (x % 15 == 0)
        return "FizzBuzz";
    else if (x % 3 == 0)
        return "Fizz";
    else if (x % 5 == 0)
        return "Buzz";
    else
        return String.valueOf(x);
}

public static void p(String fb) {
    System.out.println(fb);
}

public static void main(String[] args) {
    IntStream.range(1, 101).boxed().map(Main::fizzbuzz).forEach(Main::p);
}
</code></pre>

<p>}
```</p>

<p>もはや今までに見てきたJavaとは思えない書き方ですね。
特にmain()部分は1行で色々やっているので、解説を書いていきますが、
その前に、そもそもStreamってなに？ということで、Streamについて調べました。
以下、<a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">java.util.stream.Streamインターフェース</a>の最初の一文の引用です。</p>

<blockquote><p>A sequence of elements supporting sequential and parallel aggregate operations.</p></blockquote>

<p>つまり、直列処理も並列処理も行うことができる、連続したデータを集めたもの、のようです。
今までのコレクションとの最大の違いは、並列処理も行うことができる、という部分でしょうね。
また、関数型言語のような高階関数を多数用意しているところも特徴です。</p>

<p>Streamが何となく雰囲気分かった気がしたところで、では1行ずつ見てみましょう。
ちなみに、「模様です」と書いている部分は、まだ私自身の調査が及んでない部分です。</p>

<p><code>
IntStream.range(1, 101)
</code></p>

<p>IntStreamはprimitiveなint専用のStreamに関するインターフェース。
IntStream.range(1, 101)により、1から100までのStreamを生成します。
(IntStream.rangeClosed(1, 100)でもOKです)</p>

<p>```
IntStream.range(1, 101)</p>

<pre><code>.boxed()
</code></pre>

<p>```
.boxed()でprimitiveなintのStreamをStream&lt;Integer&gt;に変換。
Pipelineにより、Stream内のデータが必要になった時点で変換する模様です。
要するに一括変換ではない模様。</p>

<p>```
IntStream.range(1, 101).boxed()</p>

<pre><code>.map(Main::fizzbuzz)
</code></pre>

<p>```</p>

<p>map()にはFunctionを渡します。
Function&lt;T,R&gt;は、型Tの入力を受け取り型Rの結果を返す関数インターフェース。
map()は、型TのStreamを、引数に渡した関数を用いて型Rのストリームを変換(生成)します。</p>

<p>今回map()に渡すFunctionはMainクラスのfizzbuzzメソッド。
staticメソッドに対しては、特別にMain::fizzbuzzと書くことができるようになりました。
この書き方をすることで、fizzbuzzメソッドはFunctionの匿名クラスに変換される模様です。</p>

<p>map()の結果として、Stream&lt;String&gt;で、中身はFizzBuzzのStreamが生成されたことになります。</p>

<p>```
IntStream.range(1, 101).boxed().map(Main::fizzbuzz)</p>

<pre><code>.forEach(Main::p);
</code></pre>

<p>```</p>

<p>forEach()にはConsumerを渡します。
Consumer&lt;T&gt;は型Tの入力を受け取り何も返さない手続き(何も返さないから関数ではない)インターフェース。
forEach()は、型TのStreamを用いて何かしらの処理をしますが、結果は返しません。
今回のように、標準出力などの副作用を行う場合に使うことになるかと思います。</p>

<p>map()が返した型はStream&lt;String&gt;なので、Main::pの引数はStringである必要があります。
うっかりMain::pの引数をIntegerなどStringと互換のない型にした場合、
型が違うとコンパイルエラーを返してくれるため、型で悩むことがなくなります。</p>

<p>(System.out::println と書いてもOKですが、型の説明のためにわざわざMain::pを定義しました)。</p>

<p>これでmain文の難解な1行を読み解くことが出来ました(消化不良もあるかと思いますが…)。</p>

<p>ちなみに、Streamの説明のところで、並列処理もOKという話をしましたが、
このFizzBuzzを並列処理しようとした場合、下記のように書けばOKです。</p>

<p>```
IntStream.range(1, 101).boxed()</p>

<pre><code>.paraparallel()   // ここで並列処理化している
.map(Main::fizzbuzz).forEach(Main::p);
</code></pre>

<p>```</p>

<p>直列処理の場合は、1, 2, Fizz, 4, &hellip;と表示されていたのですが、
並列処理にすることにより、順番がバラバラになるのが分かるかと思います。
これはmap()が、その前のStreamが並列化されたことに伴い、
順不同で並列にデータが来るようになったためと考えられます。</p>

<p>結果を集計するような場合にはparallelは強力ですが、順序が重要な場合には
parallelは使えないと考えたほうがよいかもしれません。
ちなみに集計には、Streamに<code>collect(), min(), max()</code>が定義されていました。
最大値や最小値を、複数CPUを使って探してくれるのは、何か胸が熱くなりますね(?)。</p>

<p>さて、いつから実戦投入できるようになるかな？それが一番の問題ですね！</p>
]]></content>
  </entry>
  
</feed>
