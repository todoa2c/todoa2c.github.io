<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 技術情報棚卸し(平日限定)]]></title>
  <link href="http://todoa2c.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://todoa2c.github.io/"/>
  <updated>2014-04-14T18:15:54+09:00</updated>
  <id>http://todoa2c.github.io/</id>
  <author>
    <name><![CDATA[Atsushi Kanaya (todoa2c)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まりの意見募集中 '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/04/14/python-osaka-session-questionnaires/"/>
    <updated>2014-04-14T18:08:41+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/04/14/python-osaka-session-questionnaires</id>
    <content type="html"><![CDATA[<p>大阪Pythonユーザの集まりについて、GW明けにまた行おうと考えています。
第1回は平日夜の開催で、発表形式の会でしたが、他にも色々やってみたいという声がありましたので、
どの要望が一番多いかを調べるべく、アンケートを作成してみることにしました。</p>

<p><a href="https://twitter.com/todogzm/status/455585461386625024">https://twitter.com/todogzm/status/455585461386625024</a>">https://twitter.com/todogzm/status/455585461386625024">https://twitter.com/todogzm/status/455585461386625024</a></a></p>

<p>アンケートはGoogleドライブのフォーム作成機能を使って実現しています。
簡単に作れて即公開できるのが便利ですね。</p>

<p><a href="https://support.google.com/drive/topic/1360904?hl=ja&amp;ref_topic=2811744">フォーム &ndash; ドライブ ヘルプ</a>
を見れば、大体の作り方は分かるかと思いますので、
アンケートを作成する際には、候補のひとつに入れてみてもよいかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonのインスタンスメソッドと関数実行]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/17/python-instance-method/"/>
    <updated>2014-03-17T19:07:26+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/17/python-instance-method</id>
    <content type="html"><![CDATA[<p><a href="http://docs.python.jp/3/reference/datamodel.html#the-standard-type-hierarchy">3.データモデルのうち「インスタンスメソッド」</a>を読んでいたのですが、興味深い一文を見つけました。</p>

<blockquote><p>インスタンスメソッドオブジェクトが呼び出される際、根底にある関数 (<strong>func</strong>) が呼び出されます。このとき、クラスインスタンス (<strong>self</strong>) が引数リストの先頭に挿入されます。例えば、 C を関数 f() の定義を含むクラス、 x を C のインスタンスとすると、 x.f(1) の呼び出しは C.f(x, 1) の呼び出しと同じです。</p></blockquote>

<p>これを使うと、あるクラスのインスタンスメソッドを列挙しておいて、
リフレクションのように順次メソッドを実行しておくことが簡単に、かつオーバーヘッドがない状態で
実行することができる模様です。</p>

<p>こういう具合に書くと、</p>

<p>```
ops = [Puzzle.up, Puzzle.down]</p>

<p>p = Puzzle()</p>

<p>for op in ops:</p>

<pre><code>op(p)
</code></pre>

<p>```</p>

<p>こういう書き方をしたときと同じ挙動になるわけです。</p>

<p><code>
p = Puzzle()
p.up()
p.down()
</code></p>

<p>行数は後者の方が少ないですが、前者の書き方が必要なときもあるんですよ。
特にメソッドをひたすら実行しまくる場合には、前者の書き方は便利です。
しかもJavaでリフレクションを使った時のようなオーバーヘッドがないのは良いですね
(普通Javaではこういう書き方せずにインターフェースとか使うけど)。</p>

<p>クラスでメソッド定義をするときに、<code>def up(self):</code> と書くのは、
インスタンスメソッドとして使った場合には、第1引数のselfにはオブジェクトそのものを勝手に
指定してくれるような動きになっているのかな？</p>

<h1>追記 (2014-03-19)</h1>

<p>メソッドはレシーバを第1引数に受け取るただの関数、ということだそうです。</p>

<p><a href="https://twitter.com/hnakamur2/status/445565910149918721">https://twitter.com/hnakamur2/status/445565910149918721</a>">https://twitter.com/hnakamur2/status/445565910149918721">https://twitter.com/hnakamur2/status/445565910149918721</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まり2014/03に参加＆発表してきた '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/14/attended-osaka-python-study-session/"/>
    <updated>2014-03-14T11:44:25+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/14/attended-osaka-python-study-session</id>
    <content type="html"><![CDATA[<h1>まえがき</h1>

<p>久々の勉強会企画である<a href="http://connpass.com/event/5361/">大阪Pythonユーザの集まり2014/03</a>に
行ってきて、ついでに発表もしてきました。
勉強会でまともな話を発表するのは初めてで、ものすごく緊張しましたが、
なんとか生きて帰ってこれました。</p>

<p>会場をご提供いただきましたシナジーマーケティングさんと<a href="https://twitter.com/kawaken">@kawaken</a>さん、
ありがとうございます！
増田さん、司会進行ありがとうございます！
そして、お足元の悪い中ご参加いただきました皆様、ありがとうございます！</p>

<h1>発表内容</h1>

<h2>scikit-learnを用いた機械学習チュートリアル</h2>

<p><a href="http://www.slideshare.net/AtsushiKanaya/scikitlearn">http://www.slideshare.net/AtsushiKanaya/scikitlearn</a>">http://www.slideshare.net/AtsushiKanaya/scikitlearn">http://www.slideshare.net/AtsushiKanaya/scikitlearn</a></a></p>

<p>私の発表です。
機械学習を使う上での取っ掛かりの考え方、それを実際にscikit-learnで実装するには
どうすればよいかを、テキスト分類の例を交えながら説明したつもりです。</p>

<h2>wxPython入門</h2>

<p><a href="http://www.slideshare.net/YasushiMasuda/wxpythonpython201403">http://www.slideshare.net/YasushiMasuda/wxpythonpython201403</a>">http://www.slideshare.net/YasushiMasuda/wxpythonpython201403">http://www.slideshare.net/YasushiMasuda/wxpythonpython201403</a></a></p>

<p>増田さん(<a href="https://twitter.com/whosaysni">@whosaysni</a>)によるwxPythonのお話。
クロスプラットフォームで各OSのネイティブなコンポーネントを使うあたり、
Swingより好感が持てる(JavaFXはすみませんが不勉強で…)。</p>

<p>あとで調べてみましたが、Python 3対応はまだみたいですね。</p>

<h2>Autodocについて</h2>

<p><a href="https://speakerdeck.com/heavenshell/autodoc">https://speakerdeck.com/heavenshell/autodoc</a>">https://speakerdeck.com/heavenshell/autodoc">https://speakerdeck.com/heavenshell/autodoc</a></a></p>

<p><a href="https://twitter.com/heavenshell">@heavenshell</a> さんによる、Ruby発
<a href="http://r7kamura.github.io/2013/12/01/autodoc.html">Autodoc &ndash; r7kamura per second</a>の
Python版を作った、というお話。
Web APIサーバーに対するテストを書くと、テストからドキュメントが自動生成されるとのこと。</p>

<p>docstringを使うという選択肢もあったが、的な設計思想に関する質疑応答も聞けて
Pythonな人の考え方がかいま見えた気がしました。</p>

<p>「我々Pythonistaは〜」というフレーズを何回か聞きました。
Pythonの勉強会に参加するのは初めてなので、Pythonはそういうノリなのかしら？</p>

<h2>kurokoについて (LT)</h2>

<p><a href="http://www.hexacosa.net/documents/osakapy-20140313-lt_kuroko/#/">kurokoについて</a>  (2014-03-17 URL追加)</p>

<p><a href="https://twitter.com/hhatto">@hhatto</a> さんによる、定期実行するタスクを扱うための
<a href="https://pypi.python.org/pypi/kuroko">kuroko</a>についてのLT。</p>

<p>デコレーターいいね、な人が今日の勉強会で2名。
まだデコレーターを使ったことがないので、使ってみようっと。</p>

<h2>ちょっとした黒魔術でライブラリのバグを回避した話 (LT)</h2>

<p><a href="https://twitter.com/soundkitchen">@soundkitchen</a> さんによる、Pythonの黒魔術のお話。
使ってるライブラリのコンストラクタ周りにバグがあったので
コンストラクタを差し替えたという荒業のお話をしてくれました。</p>

<p>Pythonは黒魔術的な実装はあまり好かれないそうですが、
それでも最終手段としてこういうことができる余地を残してくれているのは素晴らしい、
とのことです。</p>

<h1>懇親会</h1>

<p>懇親会は9名、うち7名が、本勉強会を企画するに当って集まっていただいた方々でした。
個人的には、懇親会までが勉強会だと思っていますので(ブログを書くまでが勉強会、という話もあるけど)、
面白い話をもっと聞きたければ懇親会に参加すべきですよ〜と思っています。</p>

<p>今回懇親会に参加されなかった方々も、次回はご参加ください。
前の会社の後輩にも懇親会に参加していただきましたが、色々楽しい話が聞けてよかった、
と言ってくれていました。</p>

<h1>感想、反省点など</h1>

<ul>
<li>事前の準備は周囲の協力をいただきながら、ぼちぼちの出来だったかな？</li>
<li>一方、懇親会の案内はもっと早くに出すべきだった</li>
<li>肝心の発表は反省点だらけ。もっと練習しなきゃいけなかったし、スライドも洗練させるべきだった</li>
</ul>


<h1>今後</h1>

<p>関西Pythonのメーリングリストあたりで相談しながら、次回を決めていく予定です。
私も企画に絡んでいきます。
ハッカソンしたいなぁ。Pythonの開発をもう少しやってみたいし、
開発スタイルが多分オレオレ感満載なことになっていると思うので…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonのPriorityQueueとobjectの拡張比較メソッド]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/13/python-priority-queue-and-rich-comparison-method/"/>
    <updated>2014-03-13T11:22:42+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/13/python-priority-queue-and-rich-comparison-method</id>
    <content type="html"><![CDATA[<p>優先順位付きキューを使おうとして、<a href="http://docs.python.jp/3/library/queue.html">17.7. queue — 同期キュークラス &ndash; Python 3.3.3 ドキュメント</a>を見たところ、よく分からない一文に遭遇した。</p>

<blockquote><p>最小の値を持つ要素が最初に検索されます</p></blockquote>

<p>書いていることの意味は分かるんですよ。分からないのは、「じゃあ比較はどうすればいいの？」という点。
ちなみに、自作クラスのインスタンスを優先順位付きキューにそのまま入れてみたら、怒られました。</p>

<p>```
from queue import PriorityQueue</p>

<p>pq = PriorityQueue()
pq.put(A())
```</p>

<p><code>
TypeError: unorderable types: A() &lt; A()
</code></p>

<p>このエラーから察するに、PriorityQueue自身に比較用メソッドを渡してあげるのではなく、
インスタンス間で大小を比較できるようにしなさい、ということなのだろうと推測しました。
そうと分かれば話は早いってんで、
<a href="http://docs.python.jp/3/reference/datamodel.html#object.__lt__">Python言語リファレンスの3. データモデル</a>
を見ると、目的の情報を見つけることが出来ました。</p>

<p>```
object.<strong>lt</strong>(self, other)
object.<strong>le</strong>(self, other)
object.<strong>eq</strong>(self, other)
object.<strong>ne</strong>(self, other)
object.<strong>gt</strong>(self, other)
object.<strong>ge</strong>(self, other)</p>

<p>これらはいわゆる “拡張比較 (rich comparison)” メソッドです。
```</p>

<p>objectには特殊メソッド名がいくつかあるのですが、その中に比較に関するメソッドも
用意されていたわけですね。</p>

<p>今回のエラーから必要なのは、<code>__lt__</code> メソッドをオーバーライドしてあげれば良いと分かり、
早速Aクラスに<code>__lt__</code>メソッドの詳細を実装したところ、うまく動きました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check iOでレベル10に到達した]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/10/checkio-level-10/"/>
    <updated>2014-03-10T18:51:13+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/10/checkio-level-10</id>
    <content type="html"><![CDATA[<p>ちまちまやっているCheck iOですが、ようやく<a href="http://www.checkio.org/user/todogzm/">レベル10に到達</a>しました。
自分で解くのも面白いのですが、人のソースを読むのも非常に参考になります。</p>

<p>例えば<a href="http://www.checkio.org/mission/three-points-circle/">Three Points Circle</a>ですが、
私は別件で解いたように、<a href="http://manapedia.jp/text/index?text_id=658">3点を通る3つの連立方程式</a>を
用いて解きました。
方程式を解くだけではダメで、そこから<code>(x-x0)^2+(y-y0)^2=r^2</code>に変換すべく、もう一手間加えなければ、
本当の回答にまで至らなかったわけで、少々面倒でした。</p>

<p>一方、この問題を<a href="http://ja.wikipedia.org/wiki/%E5%A4%96%E6%8E%A5%E5%86%86">外接円</a>の
外心を求める問題だと気付けば、半径と位置をより容易に解くことができるわけです。</p>

<p>この解き方をしていたのは日本人の競技プログラマーですが、
競技プログラミングにおいては、問題の適切な定義と解き方の引き出しが
尋常じゃなく沢山あるのかもしれません。
もしくは、私の引き出しが少なすぎるのかもしれません orz</p>

<p>競技プログラミング用のアルゴリズムの学習も、今後はしていきたいですね。
一応本も一冊持っていることですし(ざっとは読んだけど理解は…ってレベル)</p>
]]></content>
  </entry>
  
</feed>
