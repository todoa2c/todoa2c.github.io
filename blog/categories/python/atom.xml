<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 技術情報棚卸し(平日限定)]]></title>
  <link href="http://todoa2c.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://todoa2c.github.io/"/>
  <updated>2014-03-04T19:55:58+09:00</updated>
  <id>http://todoa2c.github.io/</id>
  <author>
    <name><![CDATA[Atsushi Kanaya (todoa2c)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pythonで線形方程式を解く]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/04/linear-equations-in-python/"/>
    <updated>2014-03-04T18:55:50+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/04/linear-equations-in-python</id>
    <content type="html"><![CDATA[<p><a href="http://www.checkio.org/mission/how-much-gold/">How much gold :: CheckiO</a>を解く方法として、
何か簡単な方法はあるんだろうなと思いながら、線形方程式を解く方法を採用したわけです。</p>

<p>線形方程式を簡単に解く方法はないかな？と探したところ、
<a href="http://sympy.org/">SymPy</a>を使って式を与えるだけで解くことが出来ました。
テストその1をベタ書きしています。</p>

<p>ソースコードおよびセットアップ方法は、
<a href="http://qiita.com/ryosy383/items/e5e2ecb5976f98040d21">Pythonを使って一瞬で連立方程式を解く &ndash; Qiita</a>
を参考にしています。
要するに、右辺がゼロとなる方程式を、連立方程式を解くのに必要な分渡しているわけです。</p>

<p>```
from fractions import Fraction
from sympy import *</p>

<p>g, t, i, c = symbols(&lsquo;g t i c&rsquo;)
out = solve([</p>

<pre><code>g * Fraction(1, 1) + t * Fraction(1, 1) - Fraction(1, 2),
g * Fraction(1, 1) + i * Fraction(1, 1) - Fraction(1, 3),
g * Fraction(1, 1) + c * Fraction(1, 1) - Fraction(1, 4),
g * Fraction(1, 1) + t * Fraction(1, 1) + i * Fraction(1, 1) + c * Fraction(1, 1) - Fraction(1, 1),
</code></pre>

<p>], [g, t, i, c])</p>

<p>out[g]  # &ndash;> Fraction(1, 24)
```</p>

<p>ただ、CheckiOでは外部ライブラリの利用はできません。
また、式を動的に生成する方法があるかも分かりませんので、
複数ケースに対応する方法が分かりませんでした。</p>

<p>結局、
<a href="http://ja.wikipedia.org/wiki/%E3%82%AC%E3%82%A6%E3%82%B9%E3%81%AE%E6%B6%88%E5%8E%BB%E6%B3%95">ガウスの消去法 &ndash; Wikipedia</a>
を使って、自前実装で解くことにしました。</p>

<p>```
def gauss_elimination(m):</p>

<pre><code>'''mは[g, t, i, c, value]というベクトルを4本持つ行列'''
n = len(m)
# 前進消去
for i in range(n):
    v = m[i][i]
    if v == 0:
        # ゼロ以外の値を持つ行と交換する
        for k in range(i + 1, n):
            if m[k][i] != 0:
                m[i], m[k] = m[k], m[i]
                v = m[i][i]
                break
    for j in range(n + 1):
        m[i][j] /= v
    for k in range(i + 1, n):
        v = -m[k][i]
        for j in range(n + 1):
            m[k][j] += m[i][j] * v

# 後退代入
for i in range(n-1, 0, -1):
    v = m[i][i]
    m[i][i] /= v
    m[i][n] /= v
    for k in range(i - 1, -1, -1):
        v2 = m[k][i] * m[i][n]
        m[k][n] -= v2
        m[k][i] = Fraction(0, 1)
return m
</code></pre>

<p>```</p>

<p>これで<code>gauss_elimination()</code>が解けたときにはすべての変数の値が求められた状態になります。
良かった良かった。</p>

<p>…と思ったら、最短1行で書くことができるらしい。
<code>G+T=a, G+I=b, G+C=c, G+T+I+C=1</code>から、<code>G = (a + b + c - 1) / 2</code>が導出できて、
a, b, cを、それぞれGが含まれている場合の式に変換することで計算できると
(テスト2の方は、1 &ndash; 式とすればGが含まれる方になる)。
なるほど、勉強になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まり 2014/03 を募集開始しました '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/28/osaka-python-study-session/"/>
    <updated>2014-02-28T11:43:01+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/28/osaka-python-study-session</id>
    <content type="html"><![CDATA[<p>前回の記事で書きました、大阪でPythonの勉強会を行う、という話ですが、
本日ようやく募集開始しました。</p>

<p><a href="http://connpass.com/event/5361/">大阪Pythonユーザの集まり 2014/03 &ndash; connpass</a></p>

<ul>
<li>日時 2014/03/13 19:00</li>
<li>場所 堂島アバンザ21F</li>
</ul>


<p>Pythonユーザはもちろんのこと、
Pythonに興味を持っていただいている方のご参加もお待ちしております。</p>

<p>今時点では、下記3名が発表予定です。私も参加します。</p>

<ul>
<li><a href="https://twitter.com/whosaysni">@whosaysni</a> wxPythonの初心者向けのお話(仮) 15分</li>
<li><a href="https://twitter.com/todogzm">@todogzm</a> scikit-learnを用いた機械学習チュートリアル 30分</li>
<li><a href="https://twitter.com/heavenshell">@heavenshell</a> タイトル未定 10～15分</li>
</ul>


<p>また、当初の予定にはなかったのですが、とりあえずLT枠も作ってみました。
誰か少しでも発表できることがありましたら、ご参加をお待ちしております。
個人的にはPython 3.4の新機能を話せる人がいたら、ひとつピックアップして
お話いただけると嬉しい次第です。</p>

<p>懇親会も行う予定ですので、こちらも是非ご参加ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CheckiOでPythonのお勉強]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/24/study-with-checkio/"/>
    <updated>2014-02-24T19:47:30+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/24/study-with-checkio</id>
    <content type="html"><![CDATA[<p><a href="http://www.checkio.org/">CheckiO</a>が楽しいので、少しずつクリアしています。</p>

<p>CheckiOはPythonを使ったプログラミング学習サービスなのですが、
ゲーム要素溢れるところが非常に特徴的です。</p>

<p>ゲーム要素は、例えばこんな感じです。
私自身のPython歴がそれほど長くないので、人のコードを読むのは非常に勉強になります。</p>

<ul>
<li>サインアップするためにもPythonコードを書く必要がある</li>
<li>コードを書くことによって経験値が得られ、バッジや行ける場所が増える(行ける先はO'ReillyとかDropboxなどという見慣れた名前が…)</li>
<li>コードの提出が完了したら、自分の書いたコードを公開できる(経験値ももらえるしレビューももらえる)</li>
<li>人のコードを読むことが出来、レビューすることができる(レビューすると経験値がもらえる)</li>
</ul>


<p>サイトが重いとか、作りが分かりにくいとか不満点は少々ありますが、
パズルを解く感覚でPythonを学ぶ事ができるのは、非常に楽しいです。
下記が私のアカウントですので、よかったら私をフォローして下さい。</p>

<p><a href="http://www.checkio.org/user/todogzm/">todogzm profile  :: CheckiO</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪でPythonで集まろうの巻に参加した]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/19/osaka-python-meeting/"/>
    <updated>2014-02-19T11:01:19+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/19/osaka-python-meeting</id>
    <content type="html"><![CDATA[<h1>背景</h1>

<p><a href="http://connpass.com/event/5201/">大阪でPythonで集まろうの巻</a>に参加してきました。
参加してきましたというか、上記リンクの先を見ていただくとお分かりの通り、発端は私です。
私なんですが、恐れ多くも増田さんにボールをぶん投げ、企画していただいたという次第です。</p>

<p>私自身Pythonを初めて1年半。
実際にそれなりの時間を割いて書くようになってきたのがここ数ヶ月くらいの話なのですが、
私の周囲にPythonを書く人がいないんですね(最近少しだけ書く人が増えたけど)。
Pythonについて相談できる相手がいないわけで、少々つらいこともあるわけです。
そういう背景もあって関西のPythonコミュニティを探していたわけですが、
ここ数年の活動は停滞気味だったとのことでした。</p>

<p>まずはテーマとかないけれど、Pythonな人たちで顔合わせしましょうかね、
合わせて勉強会とか開発合宿とか企画したいね、という感じで企画されたのが今回の会合です。
増田さん、お忙しい中企画と会場をご提供いただき、ありがとうございます。</p>

<h1>会合</h1>

<p>会合ですが、各人の自己紹介を経て、勉強会のざっくり方針だけを決めて、
会合自体は30分で終わり懇親会場になだれ込みましたｗ</p>

<h1>メモ</h1>

<p>以下はメモ。時系列などは無視のだらだら箇条書きです。</p>

<ul>
<li>大阪にはPythonの仕事もGoの仕事もある！</li>
<li>ミッション・クリティカルなシステムにもPythonが使われており、構成次第では非常に大量のアクセスもさばける模様。</li>
<li>Erlangの軽量プロセスの管理がGoよりも充実しており、子プロセス生成時に、子プロセスが異常終了した場合にどのように通知して親プロセスはそのまま生存するか一緒に終了するかの制御を明示的に指定できるらしい。

<ul>
<li>Erlang開発者の論文に、システムがどういう状況で障害を起こすのか、その対策は、という話が書かれているらしい。多分これっぽい。<a href="http://www.erlang.org/download/armstrong_thesis_2003.pdf">armstrong_thesis_2003.pdf</a></li>
</ul>
</li>
<li>Seleniumのドライバーに、<a href="https://pypi.python.org/pypi/selenium/">Python用のSelenium Driver</a>がある。うちもJavaじゃなくてPythonを使ったほうがサクサク書けるんじゃないかな。</li>
<li>スプリント・バックログを付箋化するのはひと目で分かって良い。ただチケットも別途発行しており、そのチケットが溢れる問題は解決しない。</li>
<li>Web界隈だとGitHubでTravisCIで～という話をよく聞くが、CIも自動テストもない現場が普通にあるとのこと。おっとSVNの悪口はそこまでだ orz</li>
<li>勉強会の運営についても幾つか。

<ul>
<li>会場の確保は、20～40人規模なら何とかなりそう。会場提供可能な方が結構多くてビックリ。</li>
<li>開催日は、平日か土日かといえば、どちらかだけ都合がいいという人が一定数いる関係上、交互にやった方がいいんじゃないか。</li>
<li>勉強会には参加する人は多いが発表してくれる人はかなり限られる。発表の敷居を下げるか、強制で発表できるような仕組みが必要？</li>
<li>発表する側、企画する側も何らかの成果を得たい。案として、グループディスカッション形式の勉強会があっても面白いかもしれない。</li>
</ul>
</li>
</ul>


<p>最後に。大阪でPythonの勉強会を開催予定です。3月第2週あたりを予定しております。</p>

<p>あぁぁ大阪Go勉強会もこんな感じでいい加減踏ん切りつけてやらないと… orz
コミュニティ化しないといかんなぁ…。</p>

<p>こちらからは以上です。皆様、昨日はありがとうございました！</p>

<h1>そう言えば。</h1>

<p>妻の同級生が居て腰抜かしそうになるほどびっくりしました。
世の中広いようで、狭いです。</p>

<h1>追記 2014-02-19 12:55</h1>

<p><a href="https://twitter.com/ikegami__">@ikegami__</a>さんから教えていただいたのですが、
Python for Kidsという本の訳本が今月末発売予定とのことです。</p>

<p><a href="http://ssl.ohmsha.co.jp/cgi-bin/menu.cgi?ISBN=978-4-274-06944-4">たのしいプログラミング　Pythonではじめよう！</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ちっちゃいWeb APIをPython 3.3に移行する]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/07/small-web-api-integration-to-python33/"/>
    <updated>2014-02-07T13:29:21+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/07/small-web-api-integration-to-python33</id>
    <content type="html"><![CDATA[<h1>Python 2.6時代</h1>

<p>2012年夏頃、ちょっとした自然言語処理用Web APIを作ることになったとき、
実現方法を色々探した結果、<a href="http://nltk.org/">Natural Language Toolkit (NLTK)</a>に辿り着き、
それからPythonを触るようになりました。</p>

<p>周囲には誰もPythonを使ったことのある人がいなかったので、
独学でPythonやNLTKを学んだ結果、以下の様な構成になりました。</p>

<ul>
<li>Python 2.6 (EC2環境にデフォルトで入っていたものをそのまま利用…)</li>
<li><a href="http://webpy.org/">web.py</a> (軽量Webアプリケーションフレームワーク)</li>
<li><a href="http://nltk.org/">NLTK</a> (自然言語処理モジュール)</li>
<li><a href="http://www.sqlalchemy.org/">SQLAlchemy</a> (ORM)</li>
<li><a href="https://pypi.python.org/pypi/MySQL-python/">MySQL-Python</a> (MySQLドライバ)</li>
</ul>


<p>この構成はぼちぼちうまく動いていたのですが、文字列マルチバイト対応の面倒臭さや、
<a href="http://www.python.org/download/releases/2.6.9/">Python 2.6.9が2.6系最後のリリース</a>
とうことを知ってから、モジュールの構成を変えることを検討し始めたわけです。</p>

<h1>Python 3.3時代</h1>

<p>まず、無難に2.7系に行くか3.x系に行くかを検討しましたが、
文字列マルチバイト対応の面倒臭さから逃げたかったため、
Python 3.xを使うこと自体はあっさり決まりました。</p>

<p>3.xを使うことを決めた次に、ライブラリがそのまま使えるかを調査しました。
<a href="http://www.python-izm.com/contents/basis/difference_in_version.shtml">2系と3系の違い &ndash; Python入門から応用までの学習サイト</a>にも書かれているように、
Python 2.x系から3.x系では互換性が失われる変更が多数入ったので、
2.x系で使えていたライブラリが3.x系で使えない可能性があるのです。</p>

<p>調査したところ、調査時点(2014年1月時点)ではこのような対応状況でした。
主要なライブラリが1コしか対応していない…なかなかの難局です。</p>

<ul>
<li>web.py: 3.x系未対応(対応するためのPull Requestは出ているがここ数ヶ月動きなし)</li>
<li>NLTK: 3.x系未対応(ただし<a href="http://www.nltk.org/nltk3-alpha/">NLTK 3.0 Alpha Releases</a>はある)</li>
<li>SQLAlchemy: 対応済み</li>
<li>MySQL-Python: 3.x系未対応</li>
</ul>


<p>結局それなりの時間を費やして調査比較検討した結果、下記のような環境に落ち着きました。</p>

<ul>
<li>Python 2.6 → Python 3.3</li>
<li>web.py → <a href="http://flask.pocoo.org/">Flask</a> (web.py同様の軽量さに好感)</li>
<li>NLTK → <a href="http://scikit-learn.org/">scikit-learn</a> (実際やっていたのはテキスト分類なので、機械学習ライブラリに移行)</li>
<li>SQLAlchemy → そのままSQLAlchemy</li>
<li>MySQL-Python → <a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a> (<a href="http://methane.hatenablog.jp/entry/2013/10/09/Python_3_%E3%81%AE_MySQL_%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90%E4%BA%8B%E6%83%85">Python 3のMySQLドライバ事情</a>が参考になります)</li>
</ul>


<p>これにより、Web層とロジックの書き換えこそ必要になってしまいましたが、
そもそも規模が小さいWeb APIなので、割と簡単に置き換えができました。</p>

<p>MySQL-PythonからPyMySQLへの移行は、接続先のURLのschema部分を<code>mysql://</code>から<code>mysql+pymysql://</code>に
変更するだけでOK。</p>

<h1>移行してみて</h1>

<p>Python 2.x系から3.x系に移行するには、やはり今まで使えたライブラリが使えない、
という問題が出てきます。
ですが、何かしら代替となりそうなライブラリはあるみたいですので、
調査や移行に時間こそかかりますが、Python 3.xに移行できるのかなぁと思った次第です。</p>

<p>また、本件では触れていませんが、Python 2.x系だけでしか動かなかったライブラリを
2.x系、3.x系両方で動かす対応を経験したのも大きいかもしれません。</p>

<p>代替ライブラリがない場合、最悪、フォークして自分でPython 3.x対応する、という手段もある、
と思うようになったことも、Python 3.xに移行するきっかけになったと思っています。</p>

<p>ちょっと話はそれましたが、まとめ。
規模が大きいプロジェクトの場合は移行が難しいかもしれませんが、
小規模なプロジェクトの場合であれば、移行は意外と何とかなるんじゃないかな、
というのが今回の感想でした。</p>
]]></content>
  </entry>
  
</feed>
