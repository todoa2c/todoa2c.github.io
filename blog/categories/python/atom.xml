<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 技術情報棚卸し(平日限定)]]></title>
  <link href="http://todoa2c.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://todoa2c.github.io/"/>
  <updated>2014-03-13T11:40:11+09:00</updated>
  <id>http://todoa2c.github.io/</id>
  <author>
    <name><![CDATA[Atsushi Kanaya (todoa2c)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PythonのPriorityQueueとobjectの拡張比較メソッド]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/13/python-priority-queue-and-rich-comparison-method/"/>
    <updated>2014-03-13T11:22:42+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/13/python-priority-queue-and-rich-comparison-method</id>
    <content type="html"><![CDATA[<p>優先順位付きキューを使おうとして、<a href="http://docs.python.jp/3/library/queue.html">17.7. queue — 同期キュークラス &ndash; Python 3.3.3 ドキュメント</a>を見たところ、よく分からない一文に遭遇した。</p>

<blockquote><p>最小の値を持つ要素が最初に検索されます</p></blockquote>

<p>書いていることの意味は分かるんですよ。分からないのは、「じゃあ比較はどうすればいいの？」という点。
ちなみに、自作クラスのインスタンスを優先順位付きキューにそのまま入れてみたら、怒られました。</p>

<p>```
from queue import PriorityQueue</p>

<p>pq = PriorityQueue()
pq.put(A())
```</p>

<p><code>
TypeError: unorderable types: A() &lt; A()
</code></p>

<p>このエラーから察するに、PriorityQueue自身に比較用メソッドを渡してあげるのではなく、
インスタンス間で大小を比較できるようにしなさい、ということなのだろうと推測しました。
そうと分かれば話は早いってんで、
<a href="http://docs.python.jp/3/reference/datamodel.html#object.__lt__">Python言語リファレンスの3. データモデル</a>
を見ると、目的の情報を見つけることが出来ました。</p>

<p>```
object.<strong>lt</strong>(self, other)
object.<strong>le</strong>(self, other)
object.<strong>eq</strong>(self, other)
object.<strong>ne</strong>(self, other)
object.<strong>gt</strong>(self, other)
object.<strong>ge</strong>(self, other)</p>

<p>これらはいわゆる “拡張比較 (rich comparison)” メソッドです。
```</p>

<p>objectには特殊メソッド名がいくつかあるのですが、その中に比較に関するメソッドも
用意されていたわけですね。</p>

<p>今回のエラーから必要なのは、<code>__lt__</code> メソッドをオーバーライドしてあげれば良いと分かり、
早速Aクラスに<code>__lt__</code>メソッドの詳細を実装したところ、うまく動きました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check iOでレベル10に到達した]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/10/checkio-level-10/"/>
    <updated>2014-03-10T18:51:13+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/10/checkio-level-10</id>
    <content type="html"><![CDATA[<p>ちまちまやっているCheck iOですが、ようやく<a href="http://www.checkio.org/user/todogzm/">レベル10に到達</a>しました。
自分で解くのも面白いのですが、人のソースを読むのも非常に参考になります。</p>

<p>例えば<a href="http://www.checkio.org/mission/three-points-circle/">Three Points Circle</a>ですが、
私は別件で解いたように、<a href="http://manapedia.jp/text/index?text_id=658">3点を通る3つの連立方程式</a>を
用いて解きました。
方程式を解くだけではダメで、そこから<code>(x-x0)^2+(y-y0)^2=r^2</code>に変換すべく、もう一手間加えなければ、
本当の回答にまで至らなかったわけで、少々面倒でした。</p>

<p>一方、この問題を<a href="http://ja.wikipedia.org/wiki/%E5%A4%96%E6%8E%A5%E5%86%86">外接円</a>の
外心を求める問題だと気付けば、半径と位置をより容易に解くことができるわけです。</p>

<p>この解き方をしていたのは日本人の競技プログラマーですが、
競技プログラミングにおいては、問題の適切な定義と解き方の引き出しが
尋常じゃなく沢山あるのかもしれません。
もしくは、私の引き出しが少なすぎるのかもしれません orz</p>

<p>競技プログラミング用のアルゴリズムの学習も、今後はしていきたいですね。
一応本も一冊持っていることですし(ざっとは読んだけど理解は…ってレベル)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonで線形方程式を解く]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/04/linear-equations-in-python/"/>
    <updated>2014-03-04T18:55:50+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/04/linear-equations-in-python</id>
    <content type="html"><![CDATA[<p><a href="http://www.checkio.org/mission/how-much-gold/">How much gold :: CheckiO</a>を解く方法として、
何か簡単な方法はあるんだろうなと思いながら、線形方程式を解く方法を採用したわけです。</p>

<p>線形方程式を簡単に解く方法はないかな？と探したところ、
<a href="http://sympy.org/">SymPy</a>を使って式を与えるだけで解くことが出来ました。
テストその1をベタ書きしています。</p>

<p>ソースコードおよびセットアップ方法は、
<a href="http://qiita.com/ryosy383/items/e5e2ecb5976f98040d21">Pythonを使って一瞬で連立方程式を解く &ndash; Qiita</a>
を参考にしています。
要するに、右辺がゼロとなる方程式を、連立方程式を解くのに必要な分渡しているわけです。</p>

<p>```
from fractions import Fraction
from sympy import *</p>

<p>g, t, i, c = symbols(&lsquo;g t i c&rsquo;)
out = solve([</p>

<pre><code>g * Fraction(1, 1) + t * Fraction(1, 1) - Fraction(1, 2),
g * Fraction(1, 1) + i * Fraction(1, 1) - Fraction(1, 3),
g * Fraction(1, 1) + c * Fraction(1, 1) - Fraction(1, 4),
g * Fraction(1, 1) + t * Fraction(1, 1) + i * Fraction(1, 1) + c * Fraction(1, 1) - Fraction(1, 1),
</code></pre>

<p>], [g, t, i, c])</p>

<p>out[g]  # &ndash;> Fraction(1, 24)
```</p>

<p>ただ、CheckiOでは外部ライブラリの利用はできません。
また、式を動的に生成する方法があるかも分かりませんので、
複数ケースに対応する方法が分かりませんでした。</p>

<p>結局、
<a href="http://ja.wikipedia.org/wiki/%E3%82%AC%E3%82%A6%E3%82%B9%E3%81%AE%E6%B6%88%E5%8E%BB%E6%B3%95">ガウスの消去法 &ndash; Wikipedia</a>
を使って、自前実装で解くことにしました。</p>

<p>```
def gauss_elimination(m):</p>

<pre><code>'''mは[g, t, i, c, value]というベクトルを4本持つ行列'''
n = len(m)
# 前進消去
for i in range(n):
    v = m[i][i]
    if v == 0:
        # ゼロ以外の値を持つ行と交換する
        for k in range(i + 1, n):
            if m[k][i] != 0:
                m[i], m[k] = m[k], m[i]
                v = m[i][i]
                break
    for j in range(n + 1):
        m[i][j] /= v
    for k in range(i + 1, n):
        v = -m[k][i]
        for j in range(n + 1):
            m[k][j] += m[i][j] * v

# 後退代入
for i in range(n-1, 0, -1):
    v = m[i][i]
    m[i][i] /= v
    m[i][n] /= v
    for k in range(i - 1, -1, -1):
        v2 = m[k][i] * m[i][n]
        m[k][n] -= v2
        m[k][i] = Fraction(0, 1)
return m
</code></pre>

<p>```</p>

<p>これで<code>gauss_elimination()</code>が解けたときにはすべての変数の値が求められた状態になります。
良かった良かった。</p>

<p>…と思ったら、最短1行で書くことができるらしい。
<code>G+T=a, G+I=b, G+C=c, G+T+I+C=1</code>から、<code>G = (a + b + c - 1) / 2</code>が導出できて、
a, b, cを、それぞれGが含まれている場合の式に変換することで計算できると
(テスト2の方は、1 &ndash; 式とすればGが含まれる方になる)。
なるほど、勉強になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まり 2014/03 を募集開始しました '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/28/osaka-python-study-session/"/>
    <updated>2014-02-28T11:43:01+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/28/osaka-python-study-session</id>
    <content type="html"><![CDATA[<p>前回の記事で書きました、大阪でPythonの勉強会を行う、という話ですが、
本日ようやく募集開始しました。</p>

<p><a href="http://connpass.com/event/5361/">大阪Pythonユーザの集まり 2014/03 &ndash; connpass</a></p>

<ul>
<li>日時 2014/03/13 19:00</li>
<li>場所 堂島アバンザ21F</li>
</ul>


<p>Pythonユーザはもちろんのこと、
Pythonに興味を持っていただいている方のご参加もお待ちしております。</p>

<p>今時点では、下記3名が発表予定です。私も参加します。</p>

<ul>
<li><a href="https://twitter.com/whosaysni">@whosaysni</a> wxPythonの初心者向けのお話(仮) 15分</li>
<li><a href="https://twitter.com/todogzm">@todogzm</a> scikit-learnを用いた機械学習チュートリアル 30分</li>
<li><a href="https://twitter.com/heavenshell">@heavenshell</a> タイトル未定 10～15分</li>
</ul>


<p>また、当初の予定にはなかったのですが、とりあえずLT枠も作ってみました。
誰か少しでも発表できることがありましたら、ご参加をお待ちしております。
個人的にはPython 3.4の新機能を話せる人がいたら、ひとつピックアップして
お話いただけると嬉しい次第です。</p>

<p>懇親会も行う予定ですので、こちらも是非ご参加ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CheckiOでPythonのお勉強]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/24/study-with-checkio/"/>
    <updated>2014-02-24T19:47:30+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/24/study-with-checkio</id>
    <content type="html"><![CDATA[<p><a href="http://www.checkio.org/">CheckiO</a>が楽しいので、少しずつクリアしています。</p>

<p>CheckiOはPythonを使ったプログラミング学習サービスなのですが、
ゲーム要素溢れるところが非常に特徴的です。</p>

<p>ゲーム要素は、例えばこんな感じです。
私自身のPython歴がそれほど長くないので、人のコードを読むのは非常に勉強になります。</p>

<ul>
<li>サインアップするためにもPythonコードを書く必要がある</li>
<li>コードを書くことによって経験値が得られ、バッジや行ける場所が増える(行ける先はO'ReillyとかDropboxなどという見慣れた名前が…)</li>
<li>コードの提出が完了したら、自分の書いたコードを公開できる(経験値ももらえるしレビューももらえる)</li>
<li>人のコードを読むことが出来、レビューすることができる(レビューすると経験値がもらえる)</li>
</ul>


<p>サイトが重いとか、作りが分かりにくいとか不満点は少々ありますが、
パズルを解く感覚でPythonを学ぶ事ができるのは、非常に楽しいです。
下記が私のアカウントですので、よかったら私をフォローして下さい。</p>

<p><a href="http://www.checkio.org/user/todogzm/">todogzm profile  :: CheckiO</a></p>
]]></content>
  </entry>
  
</feed>
