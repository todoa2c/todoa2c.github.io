<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技術情報棚卸し(平日限定)]]></title>
  <link href="http://todoa2c.github.io/atom.xml" rel="self"/>
  <link href="http://todoa2c.github.io/"/>
  <updated>2014-02-12T19:05:22+09:00</updated>
  <id>http://todoa2c.github.io/</id>
  <author>
    <name><![CDATA[Atsushi Kanaya (todoa2c)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emailがコラボレーションツールに適していないもう1点]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/12/email-one-more-suck/"/>
    <updated>2014-02-12T18:45:30+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/12/email-one-more-suck</id>
    <content type="html"><![CDATA[<p><a href="http://gothedistance.hatenadiary.jp/">ござ先輩</a>による
<a href="http://gothedistance.hatenadiary.jp/entry/2014/02/10/120745">Eメールで作業内容を管理するのはやめましょう</a>
の記事が非常に共感できたのですが、一点だけハッキリ書きたかったことがあったので、書いておきます。</p>

<h1>新規に参加したメンバーが過去の情報にアクセス出来ない</h1>

<p>私が一番Eメール・メーリングリストによるコラボレーションに不満を持っているのはこの点です。
Eメールは各人のローカルPCに保存され、各人が管理していくことになります。
メーリングリストも、何らかのサービスを使わなければ、基本的に同様です。</p>

<p>そして一度送られたEメールは、どこか共通の場所に格納される、ということはありません。
情報が適切に蓄積されないわけですね。
その結果、新規に参加したメンバーが、過去の情報にアクセスできなくなります。
これは新規参加メンバーからすると、非常にツラいのです。</p>

<ul>
<li>どのような議論の場所があるのか</li>
<li>過去にどのような議論がなされていたか</li>
<li>社内ではどのような用語が使われているか</li>
</ul>


<p>などの情報に、新規参加メンバーはアクセスすることが出来ないからツラい。</p>

<p>しかもたちが悪いことに、昔からいた人たちは、過去の情報を持っているため、
過去の情報にアクセス出来ないという問題に気付かないのです。
そのため、昔から人たちからは、新しい情報共有の仕組みについて
議論されることが滅多にありません。</p>

<p>かなり観測範囲の狭い個人的な経験ですが、前職・現職ともにおんなじ状況でしたね。
ござ先輩の観測範囲も多分同様なことが起きている気がしますが、
他の環境はどうでしょう。。</p>

<blockquote><p>対応したログが残らず、どんな意思決定をしたのか見えなくなる</p></blockquote>

<p>に含まれているとは思いますが、新規メンバーが過去の情報にアクセス出来ない件については
ちゃんと書いておいたほうがいいと思ったので、蛇足的に書かせていただきました。</p>

<p>合わせて読みたい： <a href="http://blog.kentarok.org/entries/2014/02/11">情報共有の必要性について</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptのparseIntを数値入力の妥当性検証に使うと失敗する話]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/10/parseint-in-javascript/"/>
    <updated>2014-02-10T15:24:50+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/10/parseint-in-javascript</id>
    <content type="html"><![CDATA[<p>Webアプリケーションにおけるクライアント側のバリデーション処理で、
手抜きで下記のような書き方をしたら、(自分にとって)意外な答えが返ってきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var notNan = parseInt('10x', 10);
</span><span class='line'>console.log(notNan);
</span><span class='line'>// NaNが表示されるかと思ったけど、10が表示された</span></code></pre></td></tr></table></div></figure>


<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/parseInt?redirectlocale=ja&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FparseInt">parseInt &ndash; JavaScript | MDN</a>を見ると、確かにその通りに動いている事がわかります。下記は第1引数に関する記載の引用です。</p>

<blockquote><p>parseInt が、指定された基数においては、数ではない文字に出会った場合、その文字とそれに続く文字の全てを無視し、その地点までパースされた値の整数を返します。 parseInt は、整数の値まで数を切り捨てます。 文字列の前後に空白があっても問題ありません。</p></blockquote>

<p>Javaの<code>Integer.parseInt()</code>やPythonの<code>int()</code>のように、例外を返してくれるだろう、
または変換不可ということでNaNを返すだろう、と勝手な予想をしながら実装したのですが、
それがよくありませんでした。</p>

<p>他の言語で使い慣れているAPIのルールが、そのまま他の言語でも通じるだろう、
という思い込みは捨てて、ちゃんとAPIの挙動を調べて使うべきだ、と改めて痛感しました。</p>

<p>そもそもバリデーションですが、
バリデーションライブラリを使うか、
HTML5前提でIE 9を無視してよいのであれば、HTML5のForm Validationを使うのが便利かと思います。
今回のケースのように独自実装で頑張ると不具合混入しやすいですしね。
残念ながら私はまだこれらを使ったことがないので、ポインタだけ示しておきます。</p>

<p><a href="http://jqueryvalidation.org/">jQuery Validation Plugin</a></p>

<p><a href="http://girliemac.com/blog/2012/12/01/html5-form-validation-jp/">HTML5 Form Validation のカスタマイズ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ちっちゃいWeb APIをPython 3.3に移行する]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/07/small-web-api-integration-to-python33/"/>
    <updated>2014-02-07T13:29:21+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/07/small-web-api-integration-to-python33</id>
    <content type="html"><![CDATA[<h1>Python 2.6時代</h1>

<p>2012年夏頃、ちょっとした自然言語処理用Web APIを作ることになったとき、
実現方法を色々探した結果、<a href="http://nltk.org/">Natural Language Toolkit (NLTK)</a>に辿り着き、
それからPythonを触るようになりました。</p>

<p>周囲には誰もPythonを使ったことのある人がいなかったので、
独学でPythonやNLTKを学んだ結果、以下の様な構成になりました。</p>

<ul>
<li>Python 2.6 (EC2環境にデフォルトで入っていたものをそのまま利用…)</li>
<li><a href="http://webpy.org/">web.py</a> (軽量Webアプリケーションフレームワーク)</li>
<li><a href="http://nltk.org/">NLTK</a> (自然言語処理モジュール)</li>
<li><a href="http://www.sqlalchemy.org/">SQLAlchemy</a> (ORM)</li>
<li><a href="https://pypi.python.org/pypi/MySQL-python/">MySQL-Python</a> (MySQLドライバ)</li>
</ul>


<p>この構成はぼちぼちうまく動いていたのですが、文字列マルチバイト対応の面倒臭さや、
<a href="http://www.python.org/download/releases/2.6.9/">Python 2.6.9が2.6系最後のリリース</a>
とうことを知ってから、モジュールの構成を変えることを検討し始めたわけです。</p>

<h1>Python 3.3時代</h1>

<p>まず、無難に2.7系に行くか3.x系に行くかを検討しましたが、
文字列マルチバイト対応の面倒臭さから逃げたかったため、
Python 3.xを使うこと自体はあっさり決まりました。</p>

<p>3.xを使うことを決めた次に、ライブラリがそのまま使えるかを調査しました。
<a href="http://www.python-izm.com/contents/basis/difference_in_version.shtml">2系と3系の違い &ndash; Python入門から応用までの学習サイト</a>にも書かれているように、
Python 2.x系から3.x系では互換性が失われる変更が多数入ったので、
2.x系で使えていたライブラリが3.x系で使えない可能性があるのです。</p>

<p>調査したところ、調査時点(2014年1月時点)ではこのような対応状況でした。
主要なライブラリが1コしか対応していない…なかなかの難局です。</p>

<ul>
<li>web.py: 3.x系未対応(対応するためのPull Requestは出ているがここ数ヶ月動きなし)</li>
<li>NLTK: 3.x系未対応(ただし<a href="http://www.nltk.org/nltk3-alpha/">NLTK 3.0 Alpha Releases</a>はある)</li>
<li>SQLAlchemy: 対応済み</li>
<li>MySQL-Python: 3.x系未対応</li>
</ul>


<p>結局それなりの時間を費やして調査比較検討した結果、下記のような環境に落ち着きました。</p>

<ul>
<li>Python 2.6 → Python 3.3</li>
<li>web.py → <a href="http://flask.pocoo.org/">Flask</a> (web.py同様の軽量さに好感)</li>
<li>NLTK → <a href="http://scikit-learn.org/">scikit-learn</a> (実際やっていたのはテキスト分類なので、機械学習ライブラリに移行)</li>
<li>SQLAlchemy → そのままSQLAlchemy</li>
<li>MySQL-Python → <a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a> (<a href="http://methane.hatenablog.jp/entry/2013/10/09/Python_3_%E3%81%AE_MySQL_%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90%E4%BA%8B%E6%83%85">Python 3のMySQLドライバ事情</a>が参考になります)</li>
</ul>


<p>これにより、Web層とロジックの書き換えこそ必要になってしまいましたが、
そもそも規模が小さいWeb APIなので、割と簡単に置き換えができました。</p>

<p>MySQL-PythonからPyMySQLへの移行は、接続先のURLのschema部分を<code>mysql://</code>から<code>mysql+pymysql://</code>に
変更するだけでOK。</p>

<h1>移行してみて</h1>

<p>Python 2.x系から3.x系に移行するには、やはり今まで使えたライブラリが使えない、
という問題が出てきます。
ですが、何かしら代替となりそうなライブラリはあるみたいですので、
調査や移行に時間こそかかりますが、Python 3.xに移行できるのかなぁと思った次第です。</p>

<p>また、本件では触れていませんが、Python 2.x系だけでしか動かなかったライブラリを
2.x系、3.x系両方で動かす対応を経験したのも大きいかもしれません。</p>

<p>代替ライブラリがない場合、最悪、フォークして自分でPython 3.x対応する、という手段もある、
と思うようになったことも、Python 3.xに移行するきっかけになったと思っています。</p>

<p>ちょっと話はそれましたが、まとめ。
規模が大きいプロジェクトの場合は移行が難しいかもしれませんが、
小規模なプロジェクトの場合であれば、移行は意外と何とかなるんじゃないかな、
というのが今回の感想でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カスタム条件で二分探索したい]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/06/custom-bisect/"/>
    <updated>2014-02-06T16:46:42+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/06/custom-bisect</id>
    <content type="html"><![CDATA[<p>Pythonの<a href="http://docs.python.jp/3/library/bisect.html">bisect</a>の返す結果に戸惑った、
と同僚に話したところ、「いや他の言語のライブラリも大体同じですよ」
と言われたわけです。</p>

<p>戸惑った部分ですが、<a href="https://paiza.jp/poh/ec-campaign">新人プログラマー野田さんの課題</a>を
解いている過程で、「指定した金額以下で一番大きい金額のインデックス」が欲しい、と思ったのですよね。
結局それは<a href="http://docs.python.jp/3/library/bisect.html#bisect.bisect_left">bisect.bisect_left</a>を使って解決したんだけど、
bisect_leftの場合「返り値のインデックスの更に1コ前」が欲しい値だったわけです。</p>

<p>改めて二分探索の挙動について調べたところ、少なくともPython, Java共に、
あるデータが「挿入されてもソート状態が保たれる箇所」を探索してくれるものらしい。</p>

<p>例えば以下はPythonの例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import bisect
</span><span class='line'>
</span><span class='line'>a = [1, 2, 4, 8, 11]
</span><span class='line'>data = 6
</span><span class='line'>i = bisect.bisect(a, data)
</span><span class='line'># i の値は 3
</span><span class='line'>a.insert(i, data)
</span><span class='line'># a の値は [1, 2, 4, 6, 8, 11]</span></code></pre></td></tr></table></div></figure>


<p>なるほど。納得。</p>

<p>とは言え、カスタムの条件で二分探索したいケースもあると思うんですよね。例えば<a href="http://ja.wikipedia.org/wiki/%E6%8E%A5%E5%B0%BE%E8%BE%9E%E9%85%8D%E5%88%97">接尾辞配列</a>のように。</p>

<p>超簡単な例だと、こういうイメージ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>txt = 'banana'
</span><span class='line'>suf = [i for i in range(len(txt))]
</span><span class='line'># suf の値は [0, 1, 2, 3, 4, 5]
</span><span class='line'>
</span><span class='line'>suf.sort(key=lambda i: txt[i:])
</span><span class='line'># suf の値は [5, 3, 1, 0, 4, 2]
</span><span class='line'>
</span><span class='line'>print([txt[i:] for i in suf])
</span><span class='line'># ['a', 'ana', 'anana', 'banana', 'na', 'nana'] が出力される。
</span><span class='line'># この結果は、全部分文字列がソートされた状態
</span><span class='line'>## a
</span><span class='line'>## ana
</span><span class='line'>## anana
</span><span class='line'>## banana
</span><span class='line'>## na
</span><span class='line'>## nana
</span><span class='line'># sufにはソートされた状態の各部分文字列へのインデックスが格納されている。
</span><span class='line'># この中から、例えば'an'が含まれる全ての箇所を探す、というのはbisectでは探索できない…</span></code></pre></td></tr></table></div></figure>


<p>こういう用途用の二分探索は、接尾辞配列ライブラリに含まれてると思うんですけどね。</p>

<p>少なくともPythonで言うと、リストの外の情報を使ってソートすることはできるけれど、
それに対する二分探索による探索がないのはちょっと不便な気がしたのです。
それを可能とするライブラリがあるのであれば、それを使うにして、
なければそれを実現するライブラリを作ろうかしら。</p>

<p>「それ～～でできるよ」情報があったらお教え下さいませ。</p>
]]></content>
  </entry>
  
</feed>
