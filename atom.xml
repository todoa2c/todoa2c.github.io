<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技術情報棚卸し(平日限定)]]></title>
  <link href="http://todoa2c.github.io/atom.xml" rel="self"/>
  <link href="http://todoa2c.github.io/"/>
  <updated>2014-08-29T18:46:08+09:00</updated>
  <id>http://todoa2c.github.io/</id>
  <author>
    <name><![CDATA[Atsushi Kanaya (todoa2c)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[株式会社ラクスを退職しました]]></title>
    <link href="http://todoa2c.github.io/blog/2014/08/29/quit-working-at-rakus/"/>
    <updated>2014-08-29T15:45:19+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/08/29/quit-working-at-rakus</id>
    <content type="html"><![CDATA[<p>8月31日をもって、<a href="http://www.rakus.co.jp/">株式会社ラクス</a>を退職しました。29日が最終出社日です。
入社は2012年3月1日ですので、2年半お世話になりました。</p>

<p>入社してからというもの、<a href="http://www.rignite.com/">Rignite</a> という
ソーシャルメディアマーケティング用Webサービスの開発に従事しておりました。</p>

<p>技術的にも色々なものに触れることができました。
トピックだけでも書くと…何と言いますか、特殊なことばっかりやっていた気がします。
それもこれも、チームのメンバーに恵まれた結果かなと思っています。</p>

<ul>
<li>Python (NLTK, scikit-learnを使った感情解析やデータサイエンス的な分析)
** Pythonとの出会いから、<a href="http://osakapy.connpass.com/">大阪Pythonユーザの集まり</a>のコミュティができました！</li>
<li>Node.js (Socket.IOによるリアルタイム通信)</li>
<li>Go (結局実戦投入できなかったけど、社外で初めて勉強会を開催した。え？第2回？てへぺろ)</li>
<li>クライアント側のJavaScriptフレームワーク(AngularJS, Ember.js)</li>
</ul>


<p>一方、自分が技術だけに突き進んでいいのか？という気持ちも湧いてきており、
もっとチーム力の底上げをしていく仕事もしたいと思うようになりました。
そして将来的には、経営とITを融合させるためにはどうすればいいかを、考え実践していく…</p>

<p>そう考えたとき、今のポジションは適切ではないのだろう、と考えてしまったわけです。</p>

<p>というわけで、早速来週9月1日から、新たな会社で新たなポジションとして、
心機一転、頑張っていく所存であります！
結局技術もバリバリやりますけどね！</p>

<p>※時間切れでコレ以上書けない…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[決定木の表示に変数名を表示する]]></title>
    <link href="http://todoa2c.github.io/blog/2014/08/25/decision-tree-feature-names/"/>
    <updated>2014-08-25T20:55:28+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/08/25/decision-tree-feature-names</id>
    <content type="html"><![CDATA[<p>決定木を描画できたのはいいのですが、「変数が0数えで何番目かをいちいち数えなきゃいけないのが不便！」
というお声をいただきまして、早速調査しました。</p>

<p>結論から言いますと、できました。
<a href="http://scikit-learn.org/stable/modules/generated/sklearn.tree.export_graphviz.html">sklearn.tree.export_graphviz</a>
関数の引数に、<code>feature_names</code>を渡せばよかったです。</p>

<p>変更後のプログラムはこちら。<code>export_graphviz</code>関数の引数に、<code>feature_names=variables</code>を渡しています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import pandas as pd
</span><span class='line'>from sklearn import tree
</span><span class='line'>
</span><span class='line'>data = pd.read_table('iris.txt')
</span><span class='line'>variables = ['Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width']
</span><span class='line'>
</span><span class='line'>classifier = tree.DecisionTreeClassifier(min_samples_leaf=3, max_depth=3)
</span><span class='line'>classifier = classifier.fit(data[variables], data['Species'])
</span><span class='line'>
</span><span class='line'>with open('graph.dot', 'w') as f:
</span><span class='line'>    f = tree.export_graphviz(classifier, out_file=f, feature_names=variables)</span></code></pre></td></tr></table></div></figure>


<p>結果得られた決定木はこちら。非常に見やすくなりました！</p>

<p><img src="http://todoa2c.github.io/images/contents/20140825-feature-names.png" alt="変数名表示バージョン" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonで決定木を描いてみる]]></title>
    <link href="http://todoa2c.github.io/blog/2014/08/12/writing-decision-tree/"/>
    <updated>2014-08-12T11:48:47+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/08/12/writing-decision-tree</id>
    <content type="html"><![CDATA[<h1>はじめに</h1>

<p>データ分析が必要な局面がぼちぼち出てきましたので、まずは簡単な決定木を用いて
分析結果の可視化をしようじゃないか、というのが今回の目論見です。</p>

<h2>決定木とは</h2>

<p>決定木とは、scikit-learnの<a href="http://scikit-learn.org/stable/modules/tree.html">1.8. Decision Trees</a>によると、
分類や回帰を行うために使われる、ノンパラメトリックな教師あり学習のひとつ、とあります。
また、目的は、学習データ中の特徴(説明変数)を用いて、目的変数の推測を行えるモデルを作ること、だそうです。</p>

<p>ナンノコッチャ？ですので例を挙げますと、例えばある有料サービスに申し込んでくれる人を増やすために、
今までの履歴からどういったお客様が有料サービスに申し込んでくれたか、を調査するとします。
無料サービスA, B, Cがあったとして、どれとどれをどのくらい使っている人が
有料サービスを申し込んでくれるか、こういうことを考えたいわけですね。
ここで言う無料サービスA, B, Cが説明変数で、有料サービスに申し込むかどうかが目的変数になります。</p>

<p>決定木を使うことにより、Aのサービスを10回使って、かつCのサービスを1回以上使ったお客様は
有料サービスを申し込んでくれる可能性が高い、というモデルを構築することが出来ます。
また、モデルが構築できたら、そのモデルを用いて、有料サービスを申し込む前から
今までの行動から、お客様が有料サービスに申し込んでくれるかどうかを推定することができるようになるわけです。</p>

<h2>必要なライブラリ</h2>

<ul>
<li><a href="http://www.python.org/">Python</a> (今回使うライブラリは2/3互換です。私は3.3系を使っています)</li>
<li><a href="http://scikit-learn.org/">scikit-learn</a> (インストール方法は<a href="http://scikit-learn.org/stable/install.html">Installing scikit-learn</a>参照)</li>
<li><a href="http://pandas.pydata.org/">pandas</a> (インストール方法は<a href="http://pandas.pydata.org/pandas-docs/stable/install.html">Installation</a>参照)</li>
<li><a href="http://www.graphviz.org/">Graphviz</a> (インストール方法は<a href="http://www.graphviz.org/Download..php">Download</a>またはMacなら<code>brew install graphviz</code>でOK)</li>
</ul>


<h1>分析の手順</h1>

<h2>データの準備</h2>

<p>まずは自分の分析したいデータを用意します。…といっても、すぐに用意できないことがあるかと思いますので、
こちらに事前に調理しておいた…いやいや、日本語解説付きのデータセットがありますので、
気になるデータを使用してみてください。
<a href="http://d.hatena.ne.jp/hoxo_m/20120214/p1">統計を学びたい人へ贈る、統計解析に使えるデータセットまとめ</a></p>

<p>ここでは、Irisデータを使用します。</p>

<h2>決定木の作成</h2>

<p>データの読み込み・選定あたりでpandasを使用し、実際の学習でscikit-learnを使用します。
下記のようなコードを書き、実行してください。
<code>graph.dot</code>というファイルが生成されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import pandas as pd
</span><span class='line'>from sklearn import tree
</span><span class='line'>
</span><span class='line'># サンプルデータ(タブ区切り)の読み込み
</span><span class='line'>data = pd.read_table('iris.txt')
</span><span class='line'># 説明変数
</span><span class='line'>variables = ['Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width']
</span><span class='line'>
</span><span class='line'># 決定木の分類器を作成。各種設定は引数に与える
</span><span class='line'>classifier = tree.DecisionTreeClassifier()
</span><span class='line'># 決定木の分類器にサンプルデータを食わせて学習。目的変数はSpecies
</span><span class='line'>classifier = classifier.fit(data[variables], data['Species'])
</span><span class='line'>
</span><span class='line'># 学習した結果をGraphvizが認識できる形式にして出力する
</span><span class='line'>with open('graph.dot', 'w') as f:
</span><span class='line'>    f = tree.export_graphviz(classifier, out_file=f)</span></code></pre></td></tr></table></div></figure>


<h2>PDFによる可視化</h2>

<p>上記のコードより得られる結果は <code>graph.dot</code> というファイルなのですが、
これだけ見てもよく分かりません。
そこで、下記コマンドを実行し、PDF変換します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dot -Tpdf graph.dot -o graph.pdf</span></code></pre></td></tr></table></div></figure>


<p>結果を見てみましょう。</p>

<p><img src="http://todoa2c.github.io/images/contents/20140812-default-tree.png" alt="未設定で生成した決定木" /></p>

<p>見方は、上から順番に、説明変数を0から数えて2番め(<code>Petal.Length</code>)が2.45以下か
否かで、Yesなら左、Noなら右に進んでいくことで分類していきます。
Yesならsetosa全データが入っているので、これは分類が容易だと分かります。
Noなら、次は<code>Petal.Width</code>が1.75以下か否かで…というかたちで見ていけばよいです。</p>

<p>決定木は分類ルールが生成されるので、人にとっても解釈しやすいですね。</p>

<h2>分類ルールは機能するのか？ ： 交差検定</h2>

<p>ところで今回得られた結果には、大きな問題が2つあります。
ひとつは、未知のデータに対しても有効かどうかが分かりません。
もうひとつは、過学習している可能性が高いことです。</p>

<p>過学習とは、与えられた学習データにフィットしすぎた結果、
未知のデータに対して正しい分類ができない状態のことです。
今回の決定木も、非常に細かいところまで分類しています。
例えば<code>Petal.Width &lt;= 1.75</code>のとき、90%の確率でversicolorになるはずなのですが、
その条件下で<code>Petal.Width &gt; 1.65</code>のときはvirginicaである、と分類しています。
要するに、<code>1.65 &lt; Petal.Width &lt;= 1.75</code>のときはvirginicaである、という
細かい分類をしてしまうわけです。
この結果は確かに与えられた学習データに対してはうまくいきますが、
未知のデータに対しては、分類が細かすぎて誤分類してしまう可能性が高まります。</p>

<p>そこで、分類データを何個かに分割して、大部分を決定木の作成に使用し、
残る一部のデータを、その決定木の性能測定に使用します。
この操作を「交差検定 (Cross-validation)」と言います。</p>

<p>早速交差検定をやってみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import pandas as pd
</span><span class='line'>import numpy as np
</span><span class='line'>from sklearn import tree, cross_validation
</span><span class='line'>
</span><span class='line'>data = pd.read_table('iris.txt')
</span><span class='line'>
</span><span class='line'># データがSpecies順になっているので、シャッフルする
</span><span class='line'>data = data.reindex(np.random.permutation(data.index))
</span><span class='line'>variables = ['Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width']
</span><span class='line'>
</span><span class='line'>classifier = tree.DecisionTreeClassifier()
</span><span class='line'>
</span><span class='line'># ここが差分。交差検定を5分割して、4つのデータセットと1つの検証データに分けて精度を計算
</span><span class='line'># それを5回実施した結果を返す
</span><span class='line'>scores = cross_validation.cross_val_score(classifier, data[variables], data['Species'], cv=5)
</span><span class='line'>
</span><span class='line'>print(scores.mean(), scores)</span></code></pre></td></tr></table></div></figure>


<p>結果は下記のように出力されます(データセットを本プログラム起動時にシャッフルしているため、
結果は常に異なった値になります)。
この場合、94.67%の精度で分類ができていることになります。何となく良さげな精度？ですが、
100個のデータを与えたら、5〜6個は間違えるよ、という精度ですね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0.946666666667 [ 1.          0.93333333  1.          0.9         0.9       ]</span></code></pre></td></tr></table></div></figure>


<h2>過学習の対策</h2>

<p>決定木の過学習を抑える対策は、大きく分けて2つあります。</p>

<ol>
<li>子ノードに存在するデータ数の最小値を設ける</li>
<li>ツリーの深さを制限する</li>
</ol>


<p>1.の方は、先ほどの<code>Petal.Width</code>の例を防ぐ事ができるようになります。
本設定を使用するには、<code>tree.DecisionTreeClassifier</code>のコンストラクタ引数で設定を入れましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>classifier = tree.DecisionTreeClassifier(min_samples_leaf=2)  # 最低2件のデータが必要</span></code></pre></td></tr></table></div></figure>


<p>2.の方の設定は、下記のように行います。
ルートノードを0として、子ノードまでが1、孫ノードまでが2…と設定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>classifier = tree.DecisionTreeClassifier(max_depth=3)</span></code></pre></td></tr></table></div></figure>


<p>そして、2つのパラメーターをどう設定するのが良いか…これはもう計算してもらいましょう。
<code>min_samples_leaf</code>を1〜7、<code>max_depth</code>を2〜8、それぞれの組み合わせで精度を計算します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import pandas as pd
</span><span class='line'>import numpy as np
</span><span class='line'>from sklearn import tree, cross_validation
</span><span class='line'>
</span><span class='line'>data = pd.read_table('iris.txt')
</span><span class='line'>data = data.reindex(np.random.permutation(data.index))
</span><span class='line'>variables = ['Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width']
</span><span class='line'>
</span><span class='line'>for min_samples_leaf in range(1, 7):
</span><span class='line'>    for max_depth in range(2, 8):
</span><span class='line'>        classifier = tree.DecisionTreeClassifier(
</span><span class='line'>                min_samples_leaf=min_samples_leaf, max_depth=max_depth)
</span><span class='line'>        scores = cross_validation.cross_val_score(classifier, data[variables], data['Species'], cv=5)
</span><span class='line'>        print('{0:.3f}\t{1}\t{2}'.format(scores.mean(), min_samples_leaf, max_depth))</span></code></pre></td></tr></table></div></figure>


<p>結果はこちら。平均精度、<code>min_samples_leaf</code>、<code>max_depth</code>の順番です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0.933    1   2
</span><span class='line'>0.953 1   3
</span><span class='line'>0.947 1   4
</span><span class='line'>0.953 1   5
</span><span class='line'>0.953 1   6
</span><span class='line'>0.940 1   7   # 未設定時
</span><span class='line'>0.933 2   2
</span><span class='line'>0.953 2   3
</span><span class='line'>0.940 2   4
</span><span class='line'>0.940 2   5
</span><span class='line'>0.940 2   6
</span><span class='line'>0.940 2   7
</span><span class='line'>0.933 3   2
</span><span class='line'>0.967 3   3   # 最良
</span><span class='line'>0.967 3   4
</span><span class='line'>0.967 3   5
</span><span class='line'>0.967 3   6
</span><span class='line'>0.967 3   7
</span><span class='line'>0.933 4   2
</span><span class='line'>0.960 4   3
</span><span class='line'>0.960 4   4
</span><span class='line'>0.960 4   5
</span><span class='line'>0.960 4   6
</span><span class='line'>0.960 4   7
</span><span class='line'>0.933 5   2
</span><span class='line'>0.960 5   3
</span><span class='line'>0.960 5   4
</span><span class='line'>0.960 5   5
</span><span class='line'>0.960 5   6
</span><span class='line'>0.960 5   7
</span><span class='line'>0.933 6   2
</span><span class='line'>0.947 6   3
</span><span class='line'>0.947 6   4
</span><span class='line'>0.947 6   5
</span><span class='line'>0.947 6   6
</span><span class='line'>0.947 6   7</span></code></pre></td></tr></table></div></figure>


<p>100個のデータを与えたら6個間違えるパラメーター未設定時と比較し、最良の場合は
100個のデータを与えたら3〜4個間違える程度まで軽減されました。
ちなみに<code>min_samples_leaf=3, max_depth=3</code>のときの決定木はこちら。</p>

<p><img src="http://todoa2c.github.io/images/contents/20140812-best-parameters.png" alt="最良のパラメーターで生成した決定木" /></p>

<p>ちなみに、パラメーターの調整には、scikit-learnにGrid Searchなる機能があり、
各種パラメーターを入れ替えながら検証してくれる仕組みがあります。
今回は使いませんでしたが、次回試してみるつもりです。</p>

<h1>まとめ</h1>

<p>Python + pandas + scikit-learn で決定木を計算する方法をご紹介しました。
また、精度の計算に交差検定を使う方法と、決定木で過学習を抑えるための方法をご紹介しました。</p>

<p>実際のデータに対して試してみると、思わぬ発見が出てきて楽しいですよ。
是非お試しください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacでJavaのバージョンを切り替える方法]]></title>
    <link href="http://todoa2c.github.io/blog/2014/07/16/mac-java-switch-version/"/>
    <updated>2014-07-16T18:17:31+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/07/16/mac-java-switch-version</id>
    <content type="html"><![CDATA[<p><a href="http://www.ipa.go.jp/security/ciadr/vul/20140716-jre.html">Oracle Java の脆弱性対策について(CVE-2014-4227等)</a>
のアナウンスと共に、本脆弱性に対する修正プログラムがリリースされましたね。
※実際には修正プログラムが出る前に、脆弱性の報告が上がってしまって肝を冷やしましたが…</p>

<p>さて自分の開発環境のMacでもJDK 8 Update 11をインストールしたわけですが、
インストール後に<code>java -version</code> と打っても、今まで使っていたバージョン情報しか出なかったわけで、少し焦りました。</p>

<p>原因は、分かってしまえば何てことはなく、環境変数 <code>JAVA_HOME</code> の書き換えを忘れていた、というオチでした。</p>

<p>というわけで、環境変数を下記のように書き換えればOK。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_11.jdk/Contents/Home</span></code></pre></td></tr></table></div></figure>


<p>確認します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ java -version
</span><span class='line'>java version "1.8.0_11"
</span><span class='line'>Java(TM) SE Runtime Environment (build 1.8.0_11-b12)
</span><span class='line'>Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)</span></code></pre></td></tr></table></div></figure>


<p>無事にバージョン切り替え完了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEAでGitのRevision Graphが表示できる]]></title>
    <link href="http://todoa2c.github.io/blog/2014/07/07/intellij-git-revision-graph/"/>
    <updated>2014-07-07T18:23:34+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/07/07/intellij-git-revision-graph</id>
    <content type="html"><![CDATA[<p>またQiita側への投稿ですが、こちらにもリンクを載せておきます。</p>

<p><a href="http://qiita.com/todogzm/items/6d529098759359b13b2d">IntelliJ IDEAでGitのRevision Graphを見る &ndash; Qiita</a></p>

<p>さりげなく未だにSubversionを使ってるアピールも欠かさないわけで、切ないですね。
もっと気軽にブランチを切りたいです。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Release Checkerというサービスを開発しています]]></title>
    <link href="http://todoa2c.github.io/blog/2014/06/24/developing-oss-release-checker/"/>
    <updated>2014-06-24T19:58:33+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/06/24/developing-oss-release-checker</id>
    <content type="html"><![CDATA[<p>オープンソースのプロジェクトについて、リリース情報を収集して一覧するサービスを作っています。
その名もOSS Release Checkerという、いかにも日本人が付けたような名前です。</p>

<p><a href="http://osschecker.appspot.com/">http://osschecker.appspot.com/</a></p>

<p>うちの会社の業務で、ライブラリやフレームワークのリリース情報をチェックして報告する業務があります。
それ毎日見るの面倒だからリリース情報のチェックを一手に引き受けてくれるサービスを作ったらえぇやん、というのが発想ですね。</p>

<p>機能的な話ですが、まずはリリース情報の収集先はGitHubをターゲットにしています。
検索画面から気になるプロジェクトを検索してウォッチしていけば、あとは自動的にリリース情報を収集してくれます。
そして収集した結果、最新のリリースおよびタグ付けされたリポジトリが、画面に一覧表示される、という寸法です。</p>

<p>直近の目標はこんな感じです。
GitHubのアカウントでOAuthした上で、自分のウォッチしたいリポジトリを登録しておきます。
そして、ウォッチしているリポジトリに更新があればGitHubのメールアドレスに対してメール通知すると。
これができたら、自分的にはいい感じですね。</p>

<p>あとは見た目はもう少し何とかしたいですね。検索画面とか、Bootstrap感満載の画面とか…。
ドメインを取ってみたもののApp Engineに適用しようと思ったらGoogle Appsが必要みたいで躊躇してたり…
(Google Appsが必要じゃないケースもあるらしいが…)</p>

<p>最後に、GitHubで何かしら開発されている方は、タグ付けだけでなく、GitHubのリリース機能を使用してください。
リリース機能を使うことで、ただのタグ付けだけでなく、そのリリースがどういうものかを説明する場所と、モジュールの配布場所が提供されます。
そして、私のサービスでも、リリース情報として取り込むことができるようになります。</p>

<p>※ <a href="http://qiita.com/todogzm/items/db9f5f2cedf976379f84">GitHubのリリース機能を使う &ndash; Qiita</a> も
合わせてご参照ください。</p>

<p>こちらからは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qiitaにnpm Installでpeerinvalidエラーが出た際のエラー解消方法を書いた＋α]]></title>
    <link href="http://todoa2c.github.io/blog/2014/06/16/npm-update-peerinvalid/"/>
    <updated>2014-06-16T19:11:45+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/06/16/npm-update-peerinvalid</id>
    <content type="html"><![CDATA[<p>何度かハマるので、メモ的に書いておきました。</p>

<p><a href="http://qiita.com/todogzm/items/e965c47f888c23da1c0a">npm installでpeerinvalidエラーが出た時の解消方法</a></p>

<p>ところで、今作っているサービスのデプロイの際に、npmからモジュールを都度取ってきて
処理を行う的な部分があるのですが、npmに上がっているモジュールに問題があった場合に
デプロイの処理が止まってしまう問題があります。
対策としてはnpmに上がっているモジュールのバージョンを固定にしてしまうことだとは
思うのですが、一方で開発の際には、なるべく最新のモジュールを使うべく、
このバージョン以降を使う、という設定をしています(Qiitaに載せてるpackage.jsonみたいに)。</p>

<p>ローカル開発環境と、ステージング＆本番環境では、package.jsonの管理方法を変えるのが良いか、
はたまたどちらも統一してしまうべきか、少々悩ましいです。</p>

<p>皆様がどうされているのか、教えていただければ嬉しいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubのRelease機能についてQiitaに投稿した]]></title>
    <link href="http://todoa2c.github.io/blog/2014/06/05/github-release-feature/"/>
    <updated>2014-06-05T20:33:24+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/06/05/github-release-feature</id>
    <content type="html"><![CDATA[<p>GitHubにRelease機能というのがあります。
個人的にすごく好きな機能の一つなのですが、あまり使われていない模様でしたので、
Qiitaに
<a href="http://qiita.com/todogzm/items/db9f5f2cedf976379f84">GitHubのリリース機能を使う &ndash; Qiita</a>
を投稿しました。</p>

<p>例えば同僚が作っている
<a href="https://github.com/oohira/intercom-java/releases">intercom-javaのreleases</a> を見ると、
ただタグを打っただけではなく、そのリリースに何が含まれているかが書かれており、
リリースの内容が即座に分かって、非常にいいと思うんですね。</p>

<p>特にリリース内容もアップロードできますので、
Goでツールを作ってクロスプラットフォーム用バイナリを生成した場合には、
Release機能を使ってバイナリもアップロードすれば、配布の手間が省けて便利になります。</p>

<p>ちなみに私がGitHubのRelease機能を推しているのにはもうひとつ理由がありまして…。
その理由は、また近いうちに書きますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まり2014/05に参加＆発表してきた '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/06/02/attended-osaka-python-study-session/"/>
    <updated>2014-06-02T19:30:00+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/06/02/attended-osaka-python-study-session</id>
    <content type="html"><![CDATA[<h1>まえがき</h1>

<p><a href="http://osakapy.connpass.com/">大阪Pythonユーザの集まり</a>の勉強会、
<a href="http://osakapy.connpass.com/event/6369/">大阪Pythonユーザの集まり 2014/05</a>の
企画、参加、発表してきました。</p>

<p>まさか開始前に、高専談義が行われるとは…(私含め3名の高専出身者が参加されていました)。</p>

<h1>発表内容</h1>

<h2>Djangoの黒魔術</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35342880" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/YasushiMasuda/django-boodoo" title="Django boodoo" target="_blank">Django boodoo</a> </strong> from <strong><a href="http://www.slideshare.net/YasushiMasuda" target="_blank">Yasushi Masuda</a></strong> </div></p>

<p>増田さん (<a href="https://twitter.com/whosaysni">@whosaysni</a>) による、
Djangoを使う上での黒魔術的な工夫。
Djangoは触ったことがなかったので、黒魔術自体は参考になることはなかったものの、
内部実装を交えた話があることで、ずいぶんと興味深く聞くことができた。
スコープがスタックとして実装されており、上から順番に探索しているので、
ネストした名前の解決もうまくいくと。</p>

<h2>オープンCAEとPython</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35353509" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/TatsuyaKatayama/caepython-35353509" title="オープンCAEとPython" target="_blank">オープンCAEとPython</a> </strong> from <strong><a href="http://www.slideshare.net/TatsuyaKatayama" target="_blank">TatsuyaKatayama</a></strong> </div></p>

<p><a href="http://ofbkansai.sakura.ne.jp/">オープンCAE勉強会@関西</a>幹事の片山さんによる、
オープンCAEに関する実装とPythonとの関連について。
CAEとは<a href="http://ja.wikipedia.org/wiki/CAE">CAE &ndash; Wikipedia</a>によると、</p>

<blockquote><p>コンピュータ技術を活用して製品の設計、製造や工程設計の事前検討の支援を行うこと、またはそれを行うツールである</p></blockquote>

<p>とのこと。
今回は、数値解析・シミュレーションなどで使われる計算を行うソフトウェアの
オープンソース実装と、Pythonがどのように関係しているかをご紹介いただいた。
今回ご紹介いただいたオープンソース実装には何かしらPythonのインターフェースがあり、
最終的には、これらの実装をPythonでつなぐことを検討中とのことです。</p>

<h2>Python 3世代が考える(?) Python 2/3コード共存戦略</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35257323" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/AtsushiKanaya/python-python3and2" title="Python 2/3コード共存戦略 #osakapy" target="_blank">Python 2/3コード共存戦略 #osakapy</a> </strong> from <strong><a href="http://www.slideshare.net/AtsushiKanaya" target="_blank">Atsushi Kanaya</a></strong> </div></p>

<p>私の発表です。知らぬ間にPython 2.7を使っており、int / int でfloatが返ってきてハマった話から、
Python 2でも3でもコードをメンテナンスしなければならない場合の、
取りうる戦略とメリット・デメリットについて発表しました。</p>

<h1>LT</h1>

<h2>GAEでスパイクを捌く</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/32257210" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/idoojosjp/gae-32257210" title="GAEでスパイクを捌く" target="_blank">GAEでスパイクを捌く</a> </strong> from <strong><a href="http://www.slideshare.net/idoojosjp" target="_blank">Tsuyoshi Aizu</a></strong> </div></p>

<p>会津さん (<a href="https://twitter.com/Ido">@Ido</a>) による、瞬間的な大量リクエスト(スパイク)を
App Engineでどのように捌くかについて。
あるインスタンスが1秒間に捌けるリクエスト数から、予想される最大リクエスト数に対する
インスタンスを事前に起動しておくことで対処する。
4桁台のインスタンスを起動する的な話も…これはApp Engineならではと言った感じですね。</p>

<h2>とあるプロジェクトでのPython導入事例</h2>

<p><a href="http://www.hexacosa.net/documents/osakapy-20140529-lt"><a href="http://www.hexacosa.net/documents/osakapy-20140529-lt">http://www.hexacosa.net/documents/osakapy-20140529-lt</a></a></p>

<p>服部さん (<a href="https://twitter.com/hhatto">@hhatto</a>) による、
ソーシャルゲーム開発・運用周りで作ったツールの紹介。
あちこちで使われており、自分もまだまだ業務改善する余地がありそうだなぁと反省…。</p>

<h1>懇親会</h1>

<p>実は当日までお店すら決めていなかったのです。
今回は参加人数も多くないし、大丈夫だろうと高をくくっていたのですが、
蓋を開けると勉強会参加者は20名、懇親会参加者も11名に。</p>

<p>当日のお昼に急いで店を探して予約して、飲み放題プランで料金3500円ポッキリ、
当日の参加もOKよ！というかたちにしました。</p>

<p>また、前回は自分の終電の都合もあって23時解散にしたのですが、
もう少しゆっくりしたい方々もいらっしゃるかもしれないと思い、
実際の会計は増田さんにお願いしました。増田さん、ありがとうございます。</p>

<p>懇親会では、Javaのコミュニティの大移動の話や、フリーランスとしての活動の話など、
Python以外にも色々ためになる話を聞くことが出来ました。
そしてまた今回もErlangいいよ、という話が聞こえてきたので、
そろそろErlangを真面目に触ってみたほうがよいのかも…(いやいやそんな時間ないわ…)。</p>

<h1>次回</h1>

<p>まだ未定ですが、多分勉強会は8月開催だと思います。
また、数時間程度のハッカソンは別途検討したいと考えています。
土日の合宿もやってみたいですが、まずは平日のハッカソンかなぁ…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeshipを使ったApp Engineへの継続的デリバリー]]></title>
    <link href="http://todoa2c.github.io/blog/2014/05/30/codeship-appengine-continuous-delivery/"/>
    <updated>2014-05-30T11:13:17+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/05/30/codeship-appengine-continuous-delivery</id>
    <content type="html"><![CDATA[<p>IntelliJ IDEAからApp Engineへのデプロイが簡単にできることは以前書いたのですが、
自分のIntelliJ IDEAのローカルフォルダの情報がそのままデプロイされてしまうので、
コミットしていないコードがそのままデプロイされてしまう危険性があります。
また、デプロイの作業が自分しかできない、暗黙知化されるのも良くないわけです。</p>

<p>こういった問題の解決策として継続的デリバリーを行うべく、
実現できるサービスを探したところ、ありました。
<a href="https://www.codeship.io/">Codeship</a>というサービスです。</p>

<p>Codeshipは、扱えるコード、コードのホスト先だけでなく、
コードを動かすクラウド環境(AWSやDigital Oceanなど)も選べるし、その際に必要となる
デプロイやプロビジョニングツールも提供されており、
テストから環境構築してデプロイまでを一手に引き受けてくれるサービスです。</p>

<p>今回は、Bitbucketに置いてある自分のプライベートリポジトリを監視し、
コードのPushがあったタイミングでテストを行い、
かつmasterブランチに対するコミットがあった時点でApp Engineにデプロイする、
というところまでをやってみました。</p>

<p>基本的な実現方法は、下記をご参照ください。こっちの方が分かりやすいです。</p>

<p><a href="http://blog.codeship.io/2014/01/21/continuous-deployment-google-app-engine-bitbucket-python-django.html">Continuous Deployment for Django apps from Bitbucket to Google App Engine &ndash; Codeship</a></p>

<p>工夫した点は、設定面の工夫は特にありませんが、デプロイの仕方だけは少し工夫しています。
GitのブランチをGit-flow風にして、developを開発用ブランチ、masterをリリース用ブランチにして、
リリース時には、developの変更点をmasterにマージしてもらうようなPull Requestを
Bitbucket上で作成します。</p>

<p><img src="http://todoa2c.github.io/images/contents/20140530-bitbucket-deploy-pr.png" alt="デプロイ用Pull Requestの変更点" /></p>

<p>こうすることで、どのコミットがリリースに含まれるかが、リリース用Pull Requestを見れば
一目瞭然になるわけです。</p>

<p>※アイデアは <a href="http://d.hatena.ne.jp/naoya/20140502/1399027655">GitHub 時代のデプロイ戦略 &ndash; naoyaのはてなダイアリー</a>です。</p>

<p>あとはデプロイはCodeshipにお願いすると。</p>

<p><img src="http://todoa2c.github.io/images/contents/20140530-codeship-deploy.png" alt="Codeshipによるデプロイ" /></p>

<p>これでBitbucket上からのリリースもできるようになり、非常に快適になりました。
あとは、今はまだステージング環境のようなものを用意していないのですが、
developブランチにコミットがあった場合にステージング環境にデプロイもする、という設定を
追加すると良いかもしれないですね。</p>

<p>Codeshipは1ヶ月に50回のビルドまでであれば無料で使うことが出来ますので、
ご興味のある方は、是非是非お試しください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Engine/Pythonでハマった初心者向けトラップ]]></title>
    <link href="http://todoa2c.github.io/blog/2014/05/22/appengine-python-traps/"/>
    <updated>2014-05-22T20:08:31+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/05/22/appengine-python-traps</id>
    <content type="html"><![CDATA[<p>早速いくつかトラップにハマりました。</p>

<h1>requestsパッケージがApp Engineで動かない</h1>

<p>App Engine/Pythonは<a href="https://developers.google.com/appengine/docs/python/urlfetch/?hl=ja">URL Fetch Python API Overview</a>
にあるように、標準ライブラリのurllib, urllib2, httplibであればそのままURL Fetchが使えました。</p>

<p>一方、GitHubのAPIを叩く際に使っていた<a href="https://github.com/sigmavirus24/github3.py">github3.py</a>は
内部的に<a href="https://github.com/kennethreitz/requests">requests</a>ライブラリを使用しているわけですが、
このrequestsライブラリですと、App Engineでは動かないのです。
更にこのrequestsライブラリの中で使われているurllib3はApp Engine内で動くらしいのですが…動かず。無念。</p>

<p>結局他のGitHub APIライブラリを使用しました。</p>

<h1>GoogleAppEngineLauncher.appアップデート後の罠</h1>

<p>GoogleAppEngineLauncher.appアップデート後は、一度は起動しないと最新モジュールが
適用されないみたいです。
私はIntelliJ IDEAを使っており、そのIntelliJ IDEAが参照する<code>google_appengine</code>フォルダは
<code>/usr/local/google_appengine</code> ではなく、GoogleAppEngineLauncher.app内の結構深いところにある
<code>google_appengine</code>フォルダを参照します。</p>

<p>で、GoogleAppEngineLauncher.app がアップデートされたあとは、この <code>google_appengine</code>フォルダが
見当たらないのです。その代わり、google_appengine.zip はある。
一度起動することにより、google_appengine.zipが解凍されて <code>google_appengine</code>フォルダが
作られる模様ですね。。。気づかんわこれ。</p>

<p>こちらからは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Engine用言語をPythonにした件…]]></title>
    <link href="http://todoa2c.github.io/blog/2014/05/16/beginning-appengine-python/"/>
    <updated>2014-05-16T11:19:49+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/05/16/beginning-appengine-python</id>
    <content type="html"><![CDATA[<h1>はじめに</h1>

<p><a href="http://todoa2c.github.io/blog/2014/02/13/beginning-appengine-go/">GoでGoogle App Engineを触るテスト</a>を
書いておきながら、諸般の事情により、Pythonで書きなおすことにしました。
書き直すと言っても、大した進んでいないので、また1から書き直しという感じですね。</p>

<h2>準備</h2>

<p>今回はMacで開発しているので、ライブラリはここからダウンロードし、インストール＆実行すればOK。</p>

<p><a href="https://developers.google.com/appengine/downloads?hl=ja">Download the Google App Engine SDK &ndash; Google App Engine &ndash; Google Developers</a></p>

<p>Pythonはvirtualenv経由だとうまく動かないもようなので、Pyenvで特定の2.7系バージョンを作る。</p>

<p>開発環境は<a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a>のPythonプラグイン + App Engineサポートを利用。
間違ってもFlaskを使いたいからと言って、Flask Templateを選んではいけない。あとで自分でライブラリを
ダウンロードすること。そうしなければ、App EngineのライブラリがIntelliJ IDEA側で認識してくれなかった
(別途不具合報告予定)。</p>

<h2>書いてみる</h2>

<p>ライブラリは requirements.txt あたりを用意し、下記コマンドを実行することで、
ライブラリがlibフォルダに置かれる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install -r requirements.txt -t lib</span></code></pre></td></tr></table></div></figure>


<p>また、appengine_config.py を用意し、上記のlibフォルダをライブラリフォルダとして認識するように、
下記を記述する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import os
</span><span class='line'>import sys
</span><span class='line'>ROOTPATH = os.path.dirname(__file__)
</span><span class='line'>LIBPATH = os.path.join(ROOTPATH, 'lib')
</span><span class='line'>sys.path.append(LIBPATH)</span></code></pre></td></tr></table></div></figure>


<p>その他コードは割愛するけれど、Flaskのフレームワークとしての薄さと
3rd-partyライブラリによる拡張性の高さは結構好み。
とは言えDjangoをまじめに学習したことがないので、別途
<a href="http://connpass.com/event/6369/">大阪Pythonユーザの集まり 2014/05</a>の
Djangoセッションで学習してみようかと思う。</p>

<h2>デプロイ</h2>

<p>デプロイは、ローカル＆本番環境ともに、とりあえず簡単に、IntelliJ IDEAから試す。
ローカル環境の場合は、App Engine Serverから起動する事ができる。</p>

<p>本番環境は、メニューのToolsからGoogle App Engine → Upload App Engine app&hellip; から
アップロードできる。簡単。</p>

<p>簡単だけど、継続的デリバリーができなくなるので、別途デプロイ方法を検討する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まり 2014/05 を募集開始しました '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/05/12/osaka-python-study-session/"/>
    <updated>2014-05-12T19:37:12+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/05/12/osaka-python-study-session</id>
    <content type="html"><![CDATA[<p>第2回の大阪Pythonユーザの集まりを、5月29日に行います。</p>

<p><a href="http://connpass.com/event/6369/">大阪Pythonユーザの集まり 2014/05 &ndash; connpass</a></p>

<ul>
<li>日時 2014/05/29 19:00</li>
<li>場所 堂島アバンザ21F</li>
</ul>


<p>Pythonユーザはもちろんのこと、
Pythonに興味を持っていただいている方のご参加もお待ちしております。</p>

<p>今時点では、下記3名が発表予定です。私も参加します。</p>

<ul>
<li><a href="https://twitter.com/whosaysni">@whosaysni</a> Django関連</li>
<li><a href="https://twitter.com/todogzm">@todogzm</a> とりあえず何か。多分Python 2/3移行関連？</li>
<li><a href="https://twitter.com/Ido">@Ido</a> GAE/PyについてLT</li>
</ul>


<p>誰か少しでも発表できることがありましたら、ご参加をお待ちしております。
個人的にはPython 3.4の新機能を話せる人がいたら、お話いただけると嬉しい次第です。</p>

<p>また、発表者が少なかった場合には、グループディスカッションを考えています。
何についてディスカッションしていただくかはまだ考えていませんが、
結果として参加者も勉強会に貢献したぜ感を感じられるような勉強会にできればなぁと
漠然と考えております。</p>

<p>懇親会も行う予定ですので、こちらも是非ご参加ください。
前回の反省(?)を踏まえ、早めにアナウンスします。</p>

<p>ちなみに、アンケートを募集したものの、サンプル数が少なすぎました…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まりの意見募集中 '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/04/14/python-osaka-session-questionnaires/"/>
    <updated>2014-04-14T18:08:41+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/04/14/python-osaka-session-questionnaires</id>
    <content type="html"><![CDATA[<p>大阪Pythonユーザの集まりについて、GW明けにまた行おうと考えています。
第1回は平日夜の開催で、発表形式の会でしたが、他にも色々やってみたいという声がありましたので、
どの要望が一番多いかを調べるべく、アンケートを作成してみることにしました。</p>

<blockquote class="twitter-tweet"><p>大阪Pythonユーザの集まり・企画アンケートを作成しました。よろしければ次回に向けての企画のためのご意見をお送りください。 <a href="https://twitter.com/search?q=%23osakapy&amp;src=hash">#osakapy</a> <a href="http://t.co/OqC4rWHUPy">http://t.co/OqC4rWHUPy</a></p>&mdash; Atsushi Kanaya (@todogzm) <a href="https://twitter.com/todogzm/statuses/455585461386625024">April 14, 2014</a></blockquote>


<script async src="http://todoa2c.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>アンケートはGoogleドライブのフォーム作成機能を使って実現しています。
簡単に作れて即公開できるのが便利ですね。</p>

<p><a href="https://support.google.com/drive/topic/1360904?hl=ja&amp;ref_topic=2811744">フォーム &ndash; ドライブ ヘルプ</a>
を見れば、大体の作り方は分かるかと思いますので、
アンケートを作成する際には、候補のひとつに入れてみてもよいかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromeで元タブとは異なるプロセスで新規タブを開く方法]]></title>
    <link href="http://todoa2c.github.io/blog/2014/04/02/chrome-tabs-and-process/"/>
    <updated>2014-04-02T14:28:06+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/04/02/chrome-tabs-and-process</id>
    <content type="html"><![CDATA[<p>Google Chromeは基本的に1タブごとに1プロセスを立ち上げるマルチプロセスのアーキテクチャを採用しています。
マルチプロセスであることにより、下記のメリットが生まれるわけです。</p>

<ol>
<li>ブラウザ本体のメモリ使用量肥大化を防ぐ</li>
<li>1つのタブがクラッシュしてもブラウザ全体に影響を及ぼさない</li>
</ol>


<p>ただし、厳密に言うと1タブごとに1プロセス、というわけではありません。
具体的に言いますと、ある元タブからリンクをクリックした際に開かれるタブ、これは元タブと同じプロセスで
開かれます。
ですので、この2つのタブのうちどちらかがクラッシュすると、両方のタブがクラッシュすることになります。
また、この方法で開き続けると、1つのプロセスで何枚ものタブを開くことになるので、
最終的には1つのタブのプロセスがメモリ肥大化します。</p>

<p>個人的に、嫌なんですよね。常駐したいタブのメモリが肥大化するのって。
Twitterなどのサービスのタブを常駐させたまま各種リンクをクリックして見てた結果、
気がつけばTwitterタブを開いているプロセスのメモリが肥大化しているわけです。</p>

<p>という神経質な私のために、どうしたら別プロセスで新しいタブを開くのか確認しました。
結論から言いますと、「リンクを右クリックして新しいタブで開く」と新規タブが新しいプロセスで開けます。</p>

<p>以下、検証方法。ブラウザにはWindows版Chrome 33.0.1750.154mを使用しました。
新規タブで開くリンクに対して、下記の操作を行いました。</p>

<ol>
<li>左クリックで開く</li>
<li>中央クリックで開く</li>
<li>右クリックでコンテキストメニューを出し、「新しいタブで開く」を使って開く</li>
</ol>


<p>結果は以下のとおり、3.の右クリックして新しいタブで開く方法だけが、新しいプロセスで新規タブを
開くことが出来ました。</p>

<p><img src="http://todoa2c.github.io/images/contents/20140402-chrome-tabs-and-process.png" alt="3つの方法で新規タブを開いた場合のプロセス" /></p>

<p>最近のマシンではそれほどメモリ使用量を気にすることはないかと思いますが、
私のような神経質さを持つ方には、是非右クリック→新しいタブで開く、をおすすめします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今週はまともにブログを書けなかった…(読む価値なし日記)]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/28/no-value-waffle/"/>
    <updated>2014-03-28T12:10:27+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/28/no-value-waffle</id>
    <content type="html"><![CDATA[<p>今週も色々ありました…ちょっとここには書きにくいので、またあちこちで流すかもしれませんし、
流さないかもしれません。</p>

<p>とりあえずこんな一文でも、一応更新したんだぞ、と自分に言い聞かせるための
免罪符的読む価値なし日記でした。ちゃんちゃん。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8リリース & java.util.streamのお勉強]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/20/java8-stream/"/>
    <updated>2014-03-20T18:45:15+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/20/java8-stream</id>
    <content type="html"><![CDATA[<p>ようやくJava 8がリリースされましたね。
正直Java飽きたと思っていたのですが、Java 8はかなり熱い機能が満載です。
特に関数型ちっくに書けるのは大きいですね。</p>

<p>とりあえず練習のため、1から100までに対するFizzBuzzを、今時点で知る限りの
Java 8の機能を使って書いてみました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.stream.IntStream;
</span><span class='line'>
</span><span class='line'>public class Main {
</span><span class='line'>  public static String fizzbuzz(int x) {
</span><span class='line'>      if (x % 15 == 0)
</span><span class='line'>          return "FizzBuzz";
</span><span class='line'>      else if (x % 3 == 0)
</span><span class='line'>          return "Fizz";
</span><span class='line'>      else if (x % 5 == 0)
</span><span class='line'>          return "Buzz";
</span><span class='line'>      else
</span><span class='line'>          return String.valueOf(x);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public static void p(String fb) {
</span><span class='line'>      System.out.println(fb);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      IntStream.range(1, 101).boxed().map(Main::fizzbuzz).forEach(Main::p);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>もはや今までに見てきたJavaとは思えない書き方ですね。
特にmain()部分は1行で色々やっているので、解説を書いていきますが、
その前に、そもそもStreamってなに？ということで、Streamについて調べました。
以下、<a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">java.util.stream.Streamインターフェース</a>の最初の一文の引用です。</p>

<blockquote><p>A sequence of elements supporting sequential and parallel aggregate operations.</p></blockquote>

<p>つまり、直列処理も並列処理も行うことができる、連続したデータを集めたもの、のようです。
今までのコレクションとの最大の違いは、並列処理も行うことができる、という部分でしょうね。
また、関数型言語のような高階関数を多数用意しているところも特徴です。</p>

<p>Streamが何となく雰囲気分かった気がしたところで、では1行ずつ見てみましょう。
ちなみに、「模様です」と書いている部分は、まだ私自身の調査が及んでない部分です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101)</span></code></pre></td></tr></table></div></figure>


<p>IntStreamはprimitiveなint専用のStreamに関するインターフェース。
IntStream.range(1, 101)により、1から100までのStreamを生成します。
(IntStream.rangeClosed(1, 100)でもOKです)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101)
</span><span class='line'>  .boxed()</span></code></pre></td></tr></table></div></figure>


<p>.boxed()でprimitiveなintのStreamをStream&lt;Integer&gt;に変換。
Pipelineにより、Stream内のデータが必要になった時点で変換する模様です。
要するに一括変換ではない模様。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101).boxed()
</span><span class='line'>  .map(Main::fizzbuzz)</span></code></pre></td></tr></table></div></figure>


<p>map()にはFunctionを渡します。
Function&lt;T,R&gt;は、型Tの入力を受け取り型Rの結果を返す関数インターフェース。
map()は、型TのStreamを、引数に渡した関数を用いて型Rのストリームを変換(生成)します。</p>

<p>今回map()に渡すFunctionはMainクラスのfizzbuzzメソッド。
staticメソッドに対しては、特別にMain::fizzbuzzと書くことができるようになりました。
この書き方をすることで、fizzbuzzメソッドはFunctionの匿名クラスに変換される模様です。</p>

<p>map()の結果として、Stream&lt;String&gt;で、中身はFizzBuzzのStreamが生成されたことになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101).boxed().map(Main::fizzbuzz)
</span><span class='line'>  .forEach(Main::p);</span></code></pre></td></tr></table></div></figure>


<p>forEach()にはConsumerを渡します。
Consumer&lt;T&gt;は型Tの入力を受け取り何も返さない手続き(何も返さないから関数ではない)インターフェース。
forEach()は、型TのStreamを用いて何かしらの処理をしますが、結果は返しません。
今回のように、標準出力などの副作用を行う場合に使うことになるかと思います。</p>

<p>map()が返した型はStream&lt;String&gt;なので、Main::pの引数はStringである必要があります。
うっかりMain::pの引数をIntegerなどStringと互換のない型にした場合、
型が違うとコンパイルエラーを返してくれるため、型で悩むことがなくなります。</p>

<p>(System.out::println と書いてもOKですが、型の説明のためにわざわざMain::pを定義しました)。</p>

<p>これでmain文の難解な1行を読み解くことが出来ました(消化不良もあるかと思いますが…)。</p>

<p>ちなみに、Streamの説明のところで、並列処理もOKという話をしましたが、
このFizzBuzzを並列処理しようとした場合、下記のように書けばOKです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101).boxed()
</span><span class='line'>  .paraparallel()   // ここで並列処理化している
</span><span class='line'>  .map(Main::fizzbuzz).forEach(Main::p);</span></code></pre></td></tr></table></div></figure>


<p>直列処理の場合は、1, 2, Fizz, 4, &hellip;と表示されていたのですが、
並列処理にすることにより、順番がバラバラになるのが分かるかと思います。
これはmap()が、その前のStreamが並列化されたことに伴い、
順不同で並列にデータが来るようになったためと考えられます。</p>

<p>結果を集計するような場合にはparallelは強力ですが、順序が重要な場合には
parallelは使えないと考えたほうがよいかもしれません。
ちなみに集計には、Streamに<code>collect(), min(), max()</code>が定義されていました。
最大値や最小値を、複数CPUを使って探してくれるのは、何か胸が熱くなりますね(?)。</p>

<p>さて、いつから実戦投入できるようになるかな？それが一番の問題ですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonのインスタンスメソッドと関数実行]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/17/python-instance-method/"/>
    <updated>2014-03-17T19:07:26+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/17/python-instance-method</id>
    <content type="html"><![CDATA[<p><a href="http://docs.python.jp/3/reference/datamodel.html#the-standard-type-hierarchy">3.データモデルのうち「インスタンスメソッド」</a>を読んでいたのですが、興味深い一文を見つけました。</p>

<blockquote><p>インスタンスメソッドオブジェクトが呼び出される際、根底にある関数 (<strong>func</strong>) が呼び出されます。このとき、クラスインスタンス (<strong>self</strong>) が引数リストの先頭に挿入されます。例えば、 C を関数 f() の定義を含むクラス、 x を C のインスタンスとすると、 x.f(1) の呼び出しは C.f(x, 1) の呼び出しと同じです。</p></blockquote>

<p>これを使うと、あるクラスのインスタンスメソッドを列挙しておいて、
リフレクションのように順次メソッドを実行しておくことが簡単に、かつオーバーヘッドがない状態で
実行することができる模様です。</p>

<p>こういう具合に書くと、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ops = [Puzzle.up, Puzzle.down]
</span><span class='line'>
</span><span class='line'>p = Puzzle()
</span><span class='line'>
</span><span class='line'>for op in ops:
</span><span class='line'>    op(p)</span></code></pre></td></tr></table></div></figure>


<p>こういう書き方をしたときと同じ挙動になるわけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p = Puzzle()
</span><span class='line'>p.up()
</span><span class='line'>p.down()</span></code></pre></td></tr></table></div></figure>


<p>行数は後者の方が少ないですが、前者の書き方が必要なときもあるんですよ。
特にメソッドをひたすら実行しまくる場合には、前者の書き方は便利です。
しかもJavaでリフレクションを使った時のようなオーバーヘッドがないのは良いですね
(普通Javaではこういう書き方せずにインターフェースとか使うけど)。</p>

<p>クラスでメソッド定義をするときに、<code>def up(self):</code> と書くのは、
インスタンスメソッドとして使った場合には、第1引数のselfにはオブジェクトそのものを勝手に
指定してくれるような動きになっているのかな？</p>

<h1>追記 (2014-03-19)</h1>

<p>メソッドはレシーバを第1引数に受け取るただの関数、ということだそうです。</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/todogzm">@todogzm</a> <a href="https://twitter.com/kawaken">@kawaken</a> <a href="http://t.co/fVjQkdpxjq">http://t.co/fVjQkdpxjq</a> メソッドはレシーバを第一引数に受け取る只の関数、<a href="http://t.co/ba25AVfZuX">http://t.co/ba25AVfZuX</a> メソッドの第一引数をselfと書くのは単なる慣習で言語的に特別な意味は無いとのことなので出来るはずですよ</p>&mdash; Hiroaki Nakamura (@hnakamur2) <a href="https://twitter.com/hnakamur2/statuses/445565910149918721">March 17, 2014</a></blockquote>


<script async src="http://todoa2c.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まり2014/03に参加＆発表してきた '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/14/attended-osaka-python-study-session/"/>
    <updated>2014-03-14T11:44:25+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/14/attended-osaka-python-study-session</id>
    <content type="html"><![CDATA[<h1>まえがき</h1>

<p>久々の勉強会企画である<a href="http://connpass.com/event/5361/">大阪Pythonユーザの集まり2014/03</a>に
行ってきて、ついでに発表もしてきました。
勉強会でまともな話を発表するのは初めてで、ものすごく緊張しましたが、
なんとか生きて帰ってこれました。</p>

<p>会場をご提供いただきましたシナジーマーケティングさんと<a href="https://twitter.com/kawaken">@kawaken</a>さん、
ありがとうございます！
増田さん、司会進行ありがとうございます！
そして、お足元の悪い中ご参加いただきました皆様、ありがとうございます！</p>

<h1>発表内容</h1>

<h2>scikit-learnを用いた機械学習チュートリアル</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/32266416" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/AtsushiKanaya/scikitlearn" title="scikit-learnを用いた機械学習チュートリアル" target="_blank">scikit-learnを用いた機械学習チュートリアル</a> </strong> from <strong><a href="http://www.slideshare.net/AtsushiKanaya" target="_blank">Atsushi Kanaya</a></strong> </div></p>

<p>私の発表です。
機械学習を使う上での取っ掛かりの考え方、それを実際にscikit-learnで実装するには
どうすればよいかを、テキスト分類の例を交えながら説明したつもりです。</p>

<h2>wxPython入門</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/32299330" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/YasushiMasuda/wxpythonpython201403" title="wxPython入門（大阪Pythonユーザの集まり2014/03）" target="_blank">wxPython入門（大阪Pythonユーザの集まり2014/03）</a> </strong> from <strong><a href="http://www.slideshare.net/YasushiMasuda" target="_blank">Yasushi Masuda</a></strong> </div></p>

<p>増田さん(<a href="https://twitter.com/whosaysni">@whosaysni</a>)によるwxPythonのお話。
クロスプラットフォームで各OSのネイティブなコンポーネントを使うあたり、
Swingより好感が持てる(JavaFXはすみませんが不勉強で…)。</p>

<p>あとで調べてみましたが、Python 3対応はまだみたいですね。</p>

<h2>Autodocについて</h2>

<p><a href="https://speakerdeck.com/heavenshell/autodoc"><a href="https://speakerdeck.com/heavenshell/autodoc">https://speakerdeck.com/heavenshell/autodoc</a></a></p>

<p><a href="https://twitter.com/heavenshell">@heavenshell</a> さんによる、Ruby発
<a href="http://r7kamura.github.io/2013/12/01/autodoc.html">Autodoc &ndash; r7kamura per second</a>の
Python版を作った、というお話。
Web APIサーバーに対するテストを書くと、テストからドキュメントが自動生成されるとのこと。</p>

<p>docstringを使うという選択肢もあったが、的な設計思想に関する質疑応答も聞けて
Pythonな人の考え方がかいま見えた気がしました。</p>

<p>「我々Pythonistaは〜」というフレーズを何回か聞きました。
Pythonの勉強会に参加するのは初めてなので、Pythonはそういうノリなのかしら？</p>

<h2>kurokoについて (LT)</h2>

<p><a href="http://www.hexacosa.net/documents/osakapy-20140313-lt_kuroko/#/">kurokoについて</a>  (2014-03-17 URL追加)</p>

<p><a href="https://twitter.com/hhatto">@hhatto</a> さんによる、定期実行するタスクを扱うための
<a href="https://pypi.python.org/pypi/kuroko">kuroko</a>についてのLT。</p>

<p>デコレーターいいね、な人が今日の勉強会で2名。
まだデコレーターを使ったことがないので、使ってみようっと。</p>

<h2>ちょっとした黒魔術でライブラリのバグを回避した話 (LT)</h2>

<p><a href="https://twitter.com/soundkitchen">@soundkitchen</a> さんによる、Pythonの黒魔術のお話。
使ってるライブラリのコンストラクタ周りにバグがあったので
コンストラクタを差し替えたという荒業のお話をしてくれました。</p>

<p>Pythonは黒魔術的な実装はあまり好かれないそうですが、
それでも最終手段としてこういうことができる余地を残してくれているのは素晴らしい、
とのことです。</p>

<h1>懇親会</h1>

<p>懇親会は9名、うち7名が、本勉強会を企画するに当って集まっていただいた方々でした。
個人的には、懇親会までが勉強会だと思っていますので(ブログを書くまでが勉強会、という話もあるけど)、
面白い話をもっと聞きたければ懇親会に参加すべきですよ〜と思っています。</p>

<p>今回懇親会に参加されなかった方々も、次回はご参加ください。
前の会社の後輩にも懇親会に参加していただきましたが、色々楽しい話が聞けてよかった、
と言ってくれていました。</p>

<h1>感想、反省点など</h1>

<ul>
<li>事前の準備は周囲の協力をいただきながら、ぼちぼちの出来だったかな？</li>
<li>一方、懇親会の案内はもっと早くに出すべきだった</li>
<li>肝心の発表は反省点だらけ。もっと練習しなきゃいけなかったし、スライドも洗練させるべきだった</li>
</ul>


<h1>今後</h1>

<p>関西Pythonのメーリングリストあたりで相談しながら、次回を決めていく予定です。
私も企画に絡んでいきます。
ハッカソンしたいなぁ。Pythonの開発をもう少しやってみたいし、
開発スタイルが多分オレオレ感満載なことになっていると思うので…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonのPriorityQueueとobjectの拡張比較メソッド]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/13/python-priority-queue-and-rich-comparison-method/"/>
    <updated>2014-03-13T11:22:42+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/13/python-priority-queue-and-rich-comparison-method</id>
    <content type="html"><![CDATA[<p>優先順位付きキューを使おうとして、<a href="http://docs.python.jp/3/library/queue.html">17.7. queue — 同期キュークラス &ndash; Python 3.3.3 ドキュメント</a>を見たところ、よく分からない一文に遭遇した。</p>

<blockquote><p>最小の値を持つ要素が最初に検索されます</p></blockquote>

<p>書いていることの意味は分かるんですよ。分からないのは、「じゃあ比較はどうすればいいの？」という点。
ちなみに、自作クラスのインスタンスを優先順位付きキューにそのまま入れてみたら、怒られました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from queue import PriorityQueue
</span><span class='line'>
</span><span class='line'>pq = PriorityQueue()
</span><span class='line'>pq.put(A())</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TypeError: unorderable types: A() &lt; A()</span></code></pre></td></tr></table></div></figure>


<p>このエラーから察するに、PriorityQueue自身に比較用メソッドを渡してあげるのではなく、
インスタンス間で大小を比較できるようにしなさい、ということなのだろうと推測しました。
そうと分かれば話は早いってんで、
<a href="http://docs.python.jp/3/reference/datamodel.html#object.__lt__">Python言語リファレンスの3. データモデル</a>
を見ると、目的の情報を見つけることが出来ました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>object.__lt__(self, other)
</span><span class='line'>object.__le__(self, other)
</span><span class='line'>object.__eq__(self, other)
</span><span class='line'>object.__ne__(self, other)
</span><span class='line'>object.__gt__(self, other)
</span><span class='line'>object.__ge__(self, other)
</span><span class='line'>
</span><span class='line'>これらはいわゆる “拡張比較 (rich comparison)” メソッドです。</span></code></pre></td></tr></table></div></figure>


<p>objectには特殊メソッド名がいくつかあるのですが、その中に比較に関するメソッドも
用意されていたわけですね。</p>

<p>今回のエラーから必要なのは、<code>__lt__</code> メソッドをオーバーライドしてあげれば良いと分かり、
早速Aクラスに<code>__lt__</code>メソッドの詳細を実装したところ、うまく動きました。</p>
]]></content>
  </entry>
  
</feed>
