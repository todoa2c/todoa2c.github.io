<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技術情報棚卸し(平日限定)]]></title>
  <link href="http://todoa2c.github.io/atom.xml" rel="self"/>
  <link href="http://todoa2c.github.io/"/>
  <updated>2014-05-22T20:32:11+09:00</updated>
  <id>http://todoa2c.github.io/</id>
  <author>
    <name><![CDATA[Atsushi Kanaya (todoa2c)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[App Engine/Pythonでハマった初心者向けトラップ]]></title>
    <link href="http://todoa2c.github.io/blog/2014/05/22/appengine-python-traps/"/>
    <updated>2014-05-22T20:08:31+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/05/22/appengine-python-traps</id>
    <content type="html"><![CDATA[<p>早速いくつかトラップにハマりました。</p>

<h1>requestsパッケージがApp Engineで動かない</h1>

<p>App Engine/Pythonは<a href="https://developers.google.com/appengine/docs/python/urlfetch/?hl=ja">URL Fetch Python API Overview</a>
にあるように、標準ライブラリのurllib, urllib2, httplibであればそのままURL Fetchが使えました。</p>

<p>一方、GitHubのAPIを叩く際に使っていた<a href="https://github.com/sigmavirus24/github3.py">github3.py</a>は
内部的に<a href="https://github.com/kennethreitz/requests">requests</a>ライブラリを使用しているわけですが、
このrequestsライブラリですと、App Engineでは動かないのです。
更にこのrequestsライブラリの中で使われているurllib3はApp Engine内で動くらしいのですが…動かず。無念。</p>

<p>結局他のGitHub APIライブラリを使用しました。</p>

<h1>GoogleAppEngineLauncher.appアップデート後の罠</h1>

<p>GoogleAppEngineLauncher.appアップデート後は、一度は起動しないと最新モジュールが
適用されないみたいです。
私はIntelliJ IDEAを使っており、そのIntelliJ IDEAが参照する<code>google_appengine</code>フォルダは
<code>/usr/local/google_appengine</code> ではなく、GoogleAppEngineLauncher.app内の結構深いところにある
<code>google_appengine</code>フォルダを参照します。</p>

<p>で、GoogleAppEngineLauncher.app がアップデートされたあとは、この <code>google_appengine</code>フォルダが
見当たらないのです。その代わり、google_appengine.zip はある。
一度起動することにより、google_appengine.zipが解凍されて <code>google_appengine</code>フォルダが
作られる模様ですね。。。気づかんわこれ。</p>

<p>こちらからは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Engine用言語をPythonにした件…]]></title>
    <link href="http://todoa2c.github.io/blog/2014/05/16/beginning-appengine-python/"/>
    <updated>2014-05-16T11:19:49+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/05/16/beginning-appengine-python</id>
    <content type="html"><![CDATA[<h1>はじめに</h1>

<p><a href="http://todoa2c.github.io/blog/2014/02/13/beginning-appengine-go/">GoでGoogle App Engineを触るテスト</a>を
書いておきながら、諸般の事情により、Pythonで書きなおすことにしました。
書き直すと言っても、大した進んでいないので、また1から書き直しという感じですね。</p>

<h2>準備</h2>

<p>今回はMacで開発しているので、ライブラリはここからダウンロードし、インストール＆実行すればOK。</p>

<p><a href="https://developers.google.com/appengine/downloads?hl=ja">Download the Google App Engine SDK &ndash; Google App Engine &ndash; Google Developers</a></p>

<p>Pythonはvirtualenv経由だとうまく動かないもようなので、Pyenvで特定の2.7系バージョンを作る。</p>

<p>開発環境は<a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a>のPythonプラグイン + App Engineサポートを利用。
間違ってもFlaskを使いたいからと言って、Flask Templateを選んではいけない。あとで自分でライブラリを
ダウンロードすること。そうしなければ、App EngineのライブラリがIntelliJ IDEA側で認識してくれなかった
(別途不具合報告予定)。</p>

<h2>書いてみる</h2>

<p>ライブラリは requirements.txt あたりを用意し、下記コマンドを実行することで、
ライブラリがlibフォルダに置かれる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install -r requirements.txt -t lib</span></code></pre></td></tr></table></div></figure>


<p>また、appengine_config.py を用意し、上記のlibフォルダをライブラリフォルダとして認識するように、
下記を記述する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import os
</span><span class='line'>import sys
</span><span class='line'>ROOTPATH = os.path.dirname(__file__)
</span><span class='line'>LIBPATH = os.path.join(ROOTPATH, 'lib')
</span><span class='line'>sys.path.append(LIBPATH)</span></code></pre></td></tr></table></div></figure>


<p>その他コードは割愛するけれど、Flaskのフレームワークとしての薄さと
3rd-partyライブラリによる拡張性の高さは結構好み。
とは言えDjangoをまじめに学習したことがないので、別途
<a href="http://connpass.com/event/6369/">大阪Pythonユーザの集まり 2014/05</a>の
Djangoセッションで学習してみようかと思う。</p>

<h2>デプロイ</h2>

<p>デプロイは、ローカル＆本番環境ともに、とりあえず簡単に、IntelliJ IDEAから試す。
ローカル環境の場合は、App Engine Serverから起動する事ができる。</p>

<p>本番環境は、メニューのToolsからGoogle App Engine → Upload App Engine app&hellip; から
アップロードできる。簡単。</p>

<p>簡単だけど、継続的デリバリーができなくなるので、別途デプロイ方法を検討する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まり 2014/05 を募集開始しました '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/05/12/osaka-python-study-session/"/>
    <updated>2014-05-12T19:37:12+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/05/12/osaka-python-study-session</id>
    <content type="html"><![CDATA[<p>第2回の大阪Pythonユーザの集まりを、5月29日に行います。</p>

<p><a href="http://connpass.com/event/6369/">大阪Pythonユーザの集まり 2014/05 &ndash; connpass</a></p>

<ul>
<li>日時 2014/05/29 19:00</li>
<li>場所 堂島アバンザ21F</li>
</ul>


<p>Pythonユーザはもちろんのこと、
Pythonに興味を持っていただいている方のご参加もお待ちしております。</p>

<p>今時点では、下記3名が発表予定です。私も参加します。</p>

<ul>
<li><a href="https://twitter.com/whosaysni">@whosaysni</a> Django関連</li>
<li><a href="https://twitter.com/todogzm">@todogzm</a> とりあえず何か。多分Python 2/3移行関連？</li>
<li><a href="https://twitter.com/Ido">@Ido</a> GAE/PyについてLT</li>
</ul>


<p>誰か少しでも発表できることがありましたら、ご参加をお待ちしております。
個人的にはPython 3.4の新機能を話せる人がいたら、お話いただけると嬉しい次第です。</p>

<p>また、発表者が少なかった場合には、グループディスカッションを考えています。
何についてディスカッションしていただくかはまだ考えていませんが、
結果として参加者も勉強会に貢献したぜ感を感じられるような勉強会にできればなぁと
漠然と考えております。</p>

<p>懇親会も行う予定ですので、こちらも是非ご参加ください。
前回の反省(?)を踏まえ、早めにアナウンスします。</p>

<p>ちなみに、アンケートを募集したものの、サンプル数が少なすぎました…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まりの意見募集中 '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/04/14/python-osaka-session-questionnaires/"/>
    <updated>2014-04-14T18:08:41+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/04/14/python-osaka-session-questionnaires</id>
    <content type="html"><![CDATA[<p>大阪Pythonユーザの集まりについて、GW明けにまた行おうと考えています。
第1回は平日夜の開催で、発表形式の会でしたが、他にも色々やってみたいという声がありましたので、
どの要望が一番多いかを調べるべく、アンケートを作成してみることにしました。</p>

<blockquote class="twitter-tweet"><p>大阪Pythonユーザの集まり・企画アンケートを作成しました。よろしければ次回に向けての企画のためのご意見をお送りください。 <a href="https://twitter.com/search?q=%23osakapy&amp;src=hash">#osakapy</a> <a href="http://t.co/OqC4rWHUPy">http://t.co/OqC4rWHUPy</a></p>&mdash; Atsushi Kanaya (@todogzm) <a href="https://twitter.com/todogzm/statuses/455585461386625024">April 14, 2014</a></blockquote>


<script async src="http://todoa2c.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>アンケートはGoogleドライブのフォーム作成機能を使って実現しています。
簡単に作れて即公開できるのが便利ですね。</p>

<p><a href="https://support.google.com/drive/topic/1360904?hl=ja&amp;ref_topic=2811744">フォーム &ndash; ドライブ ヘルプ</a>
を見れば、大体の作り方は分かるかと思いますので、
アンケートを作成する際には、候補のひとつに入れてみてもよいかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromeで元タブとは異なるプロセスで新規タブを開く方法]]></title>
    <link href="http://todoa2c.github.io/blog/2014/04/02/chrome-tabs-and-process/"/>
    <updated>2014-04-02T14:28:06+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/04/02/chrome-tabs-and-process</id>
    <content type="html"><![CDATA[<p>Google Chromeは基本的に1タブごとに1プロセスを立ち上げるマルチプロセスのアーキテクチャを採用しています。
マルチプロセスであることにより、下記のメリットが生まれるわけです。</p>

<ol>
<li>ブラウザ本体のメモリ使用量肥大化を防ぐ</li>
<li>1つのタブがクラッシュしてもブラウザ全体に影響を及ぼさない</li>
</ol>


<p>ただし、厳密に言うと1タブごとに1プロセス、というわけではありません。
具体的に言いますと、ある元タブからリンクをクリックした際に開かれるタブ、これは元タブと同じプロセスで
開かれます。
ですので、この2つのタブのうちどちらかがクラッシュすると、両方のタブがクラッシュすることになります。
また、この方法で開き続けると、1つのプロセスで何枚ものタブを開くことになるので、
最終的には1つのタブのプロセスがメモリ肥大化します。</p>

<p>個人的に、嫌なんですよね。常駐したいタブのメモリが肥大化するのって。
Twitterなどのサービスのタブを常駐させたまま各種リンクをクリックして見てた結果、
気がつけばTwitterタブを開いているプロセスのメモリが肥大化しているわけです。</p>

<p>という神経質な私のために、どうしたら別プロセスで新しいタブを開くのか確認しました。
結論から言いますと、「リンクを右クリックして新しいタブで開く」と新規タブが新しいプロセスで開けます。</p>

<p>以下、検証方法。ブラウザにはWindows版Chrome 33.0.1750.154mを使用しました。
新規タブで開くリンクに対して、下記の操作を行いました。</p>

<ol>
<li>左クリックで開く</li>
<li>中央クリックで開く</li>
<li>右クリックでコンテキストメニューを出し、「新しいタブで開く」を使って開く</li>
</ol>


<p>結果は以下のとおり、3.の右クリックして新しいタブで開く方法だけが、新しいプロセスで新規タブを
開くことが出来ました。</p>

<p><img src="http://todoa2c.github.io/images/contents/20140402-chrome-tabs-and-process.png" alt="3つの方法で新規タブを開いた場合のプロセス" /></p>

<p>最近のマシンではそれほどメモリ使用量を気にすることはないかと思いますが、
私のような神経質さを持つ方には、是非右クリック→新しいタブで開く、をおすすめします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今週はまともにブログを書けなかった…(読む価値なし日記)]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/28/no-value-waffle/"/>
    <updated>2014-03-28T12:10:27+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/28/no-value-waffle</id>
    <content type="html"><![CDATA[<p>今週も色々ありました…ちょっとここには書きにくいので、またあちこちで流すかもしれませんし、
流さないかもしれません。</p>

<p>とりあえずこんな一文でも、一応更新したんだぞ、と自分に言い聞かせるための
免罪符的読む価値なし日記でした。ちゃんちゃん。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8リリース & java.util.streamのお勉強]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/20/java8-stream/"/>
    <updated>2014-03-20T18:45:15+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/20/java8-stream</id>
    <content type="html"><![CDATA[<p>ようやくJava 8がリリースされましたね。
正直Java飽きたと思っていたのですが、Java 8はかなり熱い機能が満載です。
特に関数型ちっくに書けるのは大きいですね。</p>

<p>とりあえず練習のため、1から100までに対するFizzBuzzを、今時点で知る限りの
Java 8の機能を使って書いてみました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.stream.IntStream;
</span><span class='line'>
</span><span class='line'>public class Main {
</span><span class='line'>  public static String fizzbuzz(int x) {
</span><span class='line'>      if (x % 15 == 0)
</span><span class='line'>          return "FizzBuzz";
</span><span class='line'>      else if (x % 3 == 0)
</span><span class='line'>          return "Fizz";
</span><span class='line'>      else if (x % 5 == 0)
</span><span class='line'>          return "Buzz";
</span><span class='line'>      else
</span><span class='line'>          return String.valueOf(x);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public static void p(String fb) {
</span><span class='line'>      System.out.println(fb);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      IntStream.range(1, 101).boxed().map(Main::fizzbuzz).forEach(Main::p);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>もはや今までに見てきたJavaとは思えない書き方ですね。
特にmain()部分は1行で色々やっているので、解説を書いていきますが、
その前に、そもそもStreamってなに？ということで、Streamについて調べました。
以下、<a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">java.util.stream.Streamインターフェース</a>の最初の一文の引用です。</p>

<blockquote><p>A sequence of elements supporting sequential and parallel aggregate operations.</p></blockquote>

<p>つまり、直列処理も並列処理も行うことができる、連続したデータを集めたもの、のようです。
今までのコレクションとの最大の違いは、並列処理も行うことができる、という部分でしょうね。
また、関数型言語のような高階関数を多数用意しているところも特徴です。</p>

<p>Streamが何となく雰囲気分かった気がしたところで、では1行ずつ見てみましょう。
ちなみに、「模様です」と書いている部分は、まだ私自身の調査が及んでない部分です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101)</span></code></pre></td></tr></table></div></figure>


<p>IntStreamはprimitiveなint専用のStreamに関するインターフェース。
IntStream.range(1, 101)により、1から100までのStreamを生成します。
(IntStream.rangeClosed(1, 100)でもOKです)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101)
</span><span class='line'>  .boxed()</span></code></pre></td></tr></table></div></figure>


<p>.boxed()でprimitiveなintのStreamをStream&lt;Integer&gt;に変換。
Pipelineにより、Stream内のデータが必要になった時点で変換する模様です。
要するに一括変換ではない模様。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101).boxed()
</span><span class='line'>  .map(Main::fizzbuzz)</span></code></pre></td></tr></table></div></figure>


<p>map()にはFunctionを渡します。
Function&lt;T,R&gt;は、型Tの入力を受け取り型Rの結果を返す関数インターフェース。
map()は、型TのStreamを、引数に渡した関数を用いて型Rのストリームを変換(生成)します。</p>

<p>今回map()に渡すFunctionはMainクラスのfizzbuzzメソッド。
staticメソッドに対しては、特別にMain::fizzbuzzと書くことができるようになりました。
この書き方をすることで、fizzbuzzメソッドはFunctionの匿名クラスに変換される模様です。</p>

<p>map()の結果として、Stream&lt;String&gt;で、中身はFizzBuzzのStreamが生成されたことになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101).boxed().map(Main::fizzbuzz)
</span><span class='line'>  .forEach(Main::p);</span></code></pre></td></tr></table></div></figure>


<p>forEach()にはConsumerを渡します。
Consumer&lt;T&gt;は型Tの入力を受け取り何も返さない手続き(何も返さないから関数ではない)インターフェース。
forEach()は、型TのStreamを用いて何かしらの処理をしますが、結果は返しません。
今回のように、標準出力などの副作用を行う場合に使うことになるかと思います。</p>

<p>map()が返した型はStream&lt;String&gt;なので、Main::pの引数はStringである必要があります。
うっかりMain::pの引数をIntegerなどStringと互換のない型にした場合、
型が違うとコンパイルエラーを返してくれるため、型で悩むことがなくなります。</p>

<p>(System.out::println と書いてもOKですが、型の説明のためにわざわざMain::pを定義しました)。</p>

<p>これでmain文の難解な1行を読み解くことが出来ました(消化不良もあるかと思いますが…)。</p>

<p>ちなみに、Streamの説明のところで、並列処理もOKという話をしましたが、
このFizzBuzzを並列処理しようとした場合、下記のように書けばOKです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IntStream.range(1, 101).boxed()
</span><span class='line'>  .paraparallel()   // ここで並列処理化している
</span><span class='line'>  .map(Main::fizzbuzz).forEach(Main::p);</span></code></pre></td></tr></table></div></figure>


<p>直列処理の場合は、1, 2, Fizz, 4, &hellip;と表示されていたのですが、
並列処理にすることにより、順番がバラバラになるのが分かるかと思います。
これはmap()が、その前のStreamが並列化されたことに伴い、
順不同で並列にデータが来るようになったためと考えられます。</p>

<p>結果を集計するような場合にはparallelは強力ですが、順序が重要な場合には
parallelは使えないと考えたほうがよいかもしれません。
ちなみに集計には、Streamに<code>collect(), min(), max()</code>が定義されていました。
最大値や最小値を、複数CPUを使って探してくれるのは、何か胸が熱くなりますね(?)。</p>

<p>さて、いつから実戦投入できるようになるかな？それが一番の問題ですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonのインスタンスメソッドと関数実行]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/17/python-instance-method/"/>
    <updated>2014-03-17T19:07:26+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/17/python-instance-method</id>
    <content type="html"><![CDATA[<p><a href="http://docs.python.jp/3/reference/datamodel.html#the-standard-type-hierarchy">3.データモデルのうち「インスタンスメソッド」</a>を読んでいたのですが、興味深い一文を見つけました。</p>

<blockquote><p>インスタンスメソッドオブジェクトが呼び出される際、根底にある関数 (<strong>func</strong>) が呼び出されます。このとき、クラスインスタンス (<strong>self</strong>) が引数リストの先頭に挿入されます。例えば、 C を関数 f() の定義を含むクラス、 x を C のインスタンスとすると、 x.f(1) の呼び出しは C.f(x, 1) の呼び出しと同じです。</p></blockquote>

<p>これを使うと、あるクラスのインスタンスメソッドを列挙しておいて、
リフレクションのように順次メソッドを実行しておくことが簡単に、かつオーバーヘッドがない状態で
実行することができる模様です。</p>

<p>こういう具合に書くと、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ops = [Puzzle.up, Puzzle.down]
</span><span class='line'>
</span><span class='line'>p = Puzzle()
</span><span class='line'>
</span><span class='line'>for op in ops:
</span><span class='line'>    op(p)</span></code></pre></td></tr></table></div></figure>


<p>こういう書き方をしたときと同じ挙動になるわけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p = Puzzle()
</span><span class='line'>p.up()
</span><span class='line'>p.down()</span></code></pre></td></tr></table></div></figure>


<p>行数は後者の方が少ないですが、前者の書き方が必要なときもあるんですよ。
特にメソッドをひたすら実行しまくる場合には、前者の書き方は便利です。
しかもJavaでリフレクションを使った時のようなオーバーヘッドがないのは良いですね
(普通Javaではこういう書き方せずにインターフェースとか使うけど)。</p>

<p>クラスでメソッド定義をするときに、<code>def up(self):</code> と書くのは、
インスタンスメソッドとして使った場合には、第1引数のselfにはオブジェクトそのものを勝手に
指定してくれるような動きになっているのかな？</p>

<h1>追記 (2014-03-19)</h1>

<p>メソッドはレシーバを第1引数に受け取るただの関数、ということだそうです。</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/todogzm">@todogzm</a> <a href="https://twitter.com/kawaken">@kawaken</a> <a href="http://t.co/fVjQkdpxjq">http://t.co/fVjQkdpxjq</a> メソッドはレシーバを第一引数に受け取る只の関数、<a href="http://t.co/ba25AVfZuX">http://t.co/ba25AVfZuX</a> メソッドの第一引数をselfと書くのは単なる慣習で言語的に特別な意味は無いとのことなので出来るはずですよ</p>&mdash; Hiroaki Nakamura (@hnakamur2) <a href="https://twitter.com/hnakamur2/statuses/445565910149918721">March 17, 2014</a></blockquote>


<script async src="http://todoa2c.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まり2014/03に参加＆発表してきた '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/14/attended-osaka-python-study-session/"/>
    <updated>2014-03-14T11:44:25+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/14/attended-osaka-python-study-session</id>
    <content type="html"><![CDATA[<h1>まえがき</h1>

<p>久々の勉強会企画である<a href="http://connpass.com/event/5361/">大阪Pythonユーザの集まり2014/03</a>に
行ってきて、ついでに発表もしてきました。
勉強会でまともな話を発表するのは初めてで、ものすごく緊張しましたが、
なんとか生きて帰ってこれました。</p>

<p>会場をご提供いただきましたシナジーマーケティングさんと<a href="https://twitter.com/kawaken">@kawaken</a>さん、
ありがとうございます！
増田さん、司会進行ありがとうございます！
そして、お足元の悪い中ご参加いただきました皆様、ありがとうございます！</p>

<h1>発表内容</h1>

<h2>scikit-learnを用いた機械学習チュートリアル</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/32266416" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/AtsushiKanaya/scikitlearn" title="scikit-learnを用いた機械学習チュートリアル" target="_blank">scikit-learnを用いた機械学習チュートリアル</a> </strong> from <strong><a href="http://www.slideshare.net/AtsushiKanaya" target="_blank">Atsushi Kanaya</a></strong> </div></p>

<p>私の発表です。
機械学習を使う上での取っ掛かりの考え方、それを実際にscikit-learnで実装するには
どうすればよいかを、テキスト分類の例を交えながら説明したつもりです。</p>

<h2>wxPython入門</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/32299330" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/YasushiMasuda/wxpythonpython201403" title="wxPython入門（大阪Pythonユーザの集まり2014/03）" target="_blank">wxPython入門（大阪Pythonユーザの集まり2014/03）</a> </strong> from <strong><a href="http://www.slideshare.net/YasushiMasuda" target="_blank">Yasushi Masuda</a></strong> </div></p>

<p>増田さん(<a href="https://twitter.com/whosaysni">@whosaysni</a>)によるwxPythonのお話。
クロスプラットフォームで各OSのネイティブなコンポーネントを使うあたり、
Swingより好感が持てる(JavaFXはすみませんが不勉強で…)。</p>

<p>あとで調べてみましたが、Python 3対応はまだみたいですね。</p>

<h2>Autodocについて</h2>

<p><a href="https://speakerdeck.com/heavenshell/autodoc"><a href="https://speakerdeck.com/heavenshell/autodoc">https://speakerdeck.com/heavenshell/autodoc</a></a></p>

<p><a href="https://twitter.com/heavenshell">@heavenshell</a> さんによる、Ruby発
<a href="http://r7kamura.github.io/2013/12/01/autodoc.html">Autodoc &ndash; r7kamura per second</a>の
Python版を作った、というお話。
Web APIサーバーに対するテストを書くと、テストからドキュメントが自動生成されるとのこと。</p>

<p>docstringを使うという選択肢もあったが、的な設計思想に関する質疑応答も聞けて
Pythonな人の考え方がかいま見えた気がしました。</p>

<p>「我々Pythonistaは〜」というフレーズを何回か聞きました。
Pythonの勉強会に参加するのは初めてなので、Pythonはそういうノリなのかしら？</p>

<h2>kurokoについて (LT)</h2>

<p><a href="http://www.hexacosa.net/documents/osakapy-20140313-lt_kuroko/#/">kurokoについて</a>  (2014-03-17 URL追加)</p>

<p><a href="https://twitter.com/hhatto">@hhatto</a> さんによる、定期実行するタスクを扱うための
<a href="https://pypi.python.org/pypi/kuroko">kuroko</a>についてのLT。</p>

<p>デコレーターいいね、な人が今日の勉強会で2名。
まだデコレーターを使ったことがないので、使ってみようっと。</p>

<h2>ちょっとした黒魔術でライブラリのバグを回避した話 (LT)</h2>

<p><a href="https://twitter.com/soundkitchen">@soundkitchen</a> さんによる、Pythonの黒魔術のお話。
使ってるライブラリのコンストラクタ周りにバグがあったので
コンストラクタを差し替えたという荒業のお話をしてくれました。</p>

<p>Pythonは黒魔術的な実装はあまり好かれないそうですが、
それでも最終手段としてこういうことができる余地を残してくれているのは素晴らしい、
とのことです。</p>

<h1>懇親会</h1>

<p>懇親会は9名、うち7名が、本勉強会を企画するに当って集まっていただいた方々でした。
個人的には、懇親会までが勉強会だと思っていますので(ブログを書くまでが勉強会、という話もあるけど)、
面白い話をもっと聞きたければ懇親会に参加すべきですよ〜と思っています。</p>

<p>今回懇親会に参加されなかった方々も、次回はご参加ください。
前の会社の後輩にも懇親会に参加していただきましたが、色々楽しい話が聞けてよかった、
と言ってくれていました。</p>

<h1>感想、反省点など</h1>

<ul>
<li>事前の準備は周囲の協力をいただきながら、ぼちぼちの出来だったかな？</li>
<li>一方、懇親会の案内はもっと早くに出すべきだった</li>
<li>肝心の発表は反省点だらけ。もっと練習しなきゃいけなかったし、スライドも洗練させるべきだった</li>
</ul>


<h1>今後</h1>

<p>関西Pythonのメーリングリストあたりで相談しながら、次回を決めていく予定です。
私も企画に絡んでいきます。
ハッカソンしたいなぁ。Pythonの開発をもう少しやってみたいし、
開発スタイルが多分オレオレ感満載なことになっていると思うので…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonのPriorityQueueとobjectの拡張比較メソッド]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/13/python-priority-queue-and-rich-comparison-method/"/>
    <updated>2014-03-13T11:22:42+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/13/python-priority-queue-and-rich-comparison-method</id>
    <content type="html"><![CDATA[<p>優先順位付きキューを使おうとして、<a href="http://docs.python.jp/3/library/queue.html">17.7. queue — 同期キュークラス &ndash; Python 3.3.3 ドキュメント</a>を見たところ、よく分からない一文に遭遇した。</p>

<blockquote><p>最小の値を持つ要素が最初に検索されます</p></blockquote>

<p>書いていることの意味は分かるんですよ。分からないのは、「じゃあ比較はどうすればいいの？」という点。
ちなみに、自作クラスのインスタンスを優先順位付きキューにそのまま入れてみたら、怒られました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from queue import PriorityQueue
</span><span class='line'>
</span><span class='line'>pq = PriorityQueue()
</span><span class='line'>pq.put(A())</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TypeError: unorderable types: A() &lt; A()</span></code></pre></td></tr></table></div></figure>


<p>このエラーから察するに、PriorityQueue自身に比較用メソッドを渡してあげるのではなく、
インスタンス間で大小を比較できるようにしなさい、ということなのだろうと推測しました。
そうと分かれば話は早いってんで、
<a href="http://docs.python.jp/3/reference/datamodel.html#object.__lt__">Python言語リファレンスの3. データモデル</a>
を見ると、目的の情報を見つけることが出来ました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>object.__lt__(self, other)
</span><span class='line'>object.__le__(self, other)
</span><span class='line'>object.__eq__(self, other)
</span><span class='line'>object.__ne__(self, other)
</span><span class='line'>object.__gt__(self, other)
</span><span class='line'>object.__ge__(self, other)
</span><span class='line'>
</span><span class='line'>これらはいわゆる “拡張比較 (rich comparison)” メソッドです。</span></code></pre></td></tr></table></div></figure>


<p>objectには特殊メソッド名がいくつかあるのですが、その中に比較に関するメソッドも
用意されていたわけですね。</p>

<p>今回のエラーから必要なのは、<code>__lt__</code> メソッドをオーバーライドしてあげれば良いと分かり、
早速Aクラスに<code>__lt__</code>メソッドの詳細を実装したところ、うまく動きました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check iOでレベル10に到達した]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/10/checkio-level-10/"/>
    <updated>2014-03-10T18:51:13+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/10/checkio-level-10</id>
    <content type="html"><![CDATA[<p>ちまちまやっているCheck iOですが、ようやく<a href="http://www.checkio.org/user/todogzm/">レベル10に到達</a>しました。
自分で解くのも面白いのですが、人のソースを読むのも非常に参考になります。</p>

<p>例えば<a href="http://www.checkio.org/mission/three-points-circle/">Three Points Circle</a>ですが、
私は別件で解いたように、<a href="http://manapedia.jp/text/index?text_id=658">3点を通る3つの連立方程式</a>を
用いて解きました。
方程式を解くだけではダメで、そこから<code>(x-x0)^2+(y-y0)^2=r^2</code>に変換すべく、もう一手間加えなければ、
本当の回答にまで至らなかったわけで、少々面倒でした。</p>

<p>一方、この問題を<a href="http://ja.wikipedia.org/wiki/%E5%A4%96%E6%8E%A5%E5%86%86">外接円</a>の
外心を求める問題だと気付けば、半径と位置をより容易に解くことができるわけです。</p>

<p>この解き方をしていたのは日本人の競技プログラマーですが、
競技プログラミングにおいては、問題の適切な定義と解き方の引き出しが
尋常じゃなく沢山あるのかもしれません。
もしくは、私の引き出しが少なすぎるのかもしれません orz</p>

<p>競技プログラミング用のアルゴリズムの学習も、今後はしていきたいですね。
一応本も一冊持っていることですし(ざっとは読んだけど理解は…ってレベル)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コーチング実践してみた感想とロールモデルの距離感]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/06/coaching-session-impression/"/>
    <updated>2014-03-06T17:41:18+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/06/coaching-session-impression</id>
    <content type="html"><![CDATA[<h1>前置き</h1>

<p>最近、会社のチーム内でコーチング研修が何回かありました。
コーチングとは何かについては、<a href="http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%BC%E3%83%81%E3%83%B3%E3%82%B0">コーチング &ndash; Wikipedia</a>から引用するに留めます。</p>

<blockquote><p>コーチング（coaching）とは、人材開発の技法の1つ。対話によって相手の自己実現や目標達成を図る技術である。相手の話をよく聴き（傾聴）、感じたことを伝えて承認し、質問することで、自発的な行動を促す。</p></blockquote>

<p>コーチング研修では、コーチングの基礎を学び、
何度か演習(コーチングの時間をセッションと言うそうです)もこなしたのですが、
どうしても短い時間(長くて15分)のセッションだと、
答えを見つけるまでに到達できないことも多かったので、
少し消化不良を起こしていたのです。</p>

<h1>実践</h1>

<p>というわけで、本日コーチングを実践してみました。
私がコーチ役で、クライアント役には、個人的も周囲的にも今後の成長が期待される後輩さんに
なっていただきました。</p>

<p>テーマは「今後のキャリア形成について」的な感じで、
1時間のセッションをやってみました。
事前に考えた質問はこんな感じです(質問メモすら渡してしまったので覚えている範囲)</p>

<ul>
<li>興味がある・追求したい技術</li>
<li>今のチームと前のチームとの違い</li>
<li>今のチームでクライアントに求められいること、またはクライアントが思うこうありたい姿</li>
<li>成功体験・失敗体験</li>
<li>ロールモデル(参考にしている人物像)</li>
<li>社外活動に関する質問いくつか(勉強会、コミュニテOSS…)</li>
</ul>


<p>他にも色々あったと思いますが、上記について質問しながら、
3年後にどうありたいかをイメージしてもらい、ありたい姿に向かうためには
具体的にどういうことをやっていけばいいかを挙げてもらい、
そのうち1つを実施することを決めてもらう、というところまでは
一応できたかなと思います。</p>

<p>クライアントさんは日頃から大体考えていたことらしいので、
だいぶクライアントさんに助けられた感はあります。もっと実践せな…</p>

<h1>やってみた感想</h1>

<p>うまく行ったこともぼちぼちありますが、
いくつかうまく行かなかったことがあるので、メモとして残しておきます。</p>

<h2>明確な問題のないセッションの落とし所をどうすればよいか</h2>

<p>今回のように、何か明確な問題があるわけではない、目標設定をするようなセッションでは、
具体的な行動への落とし所が難しかったです。
目標を決めたらOKだと事前には思っていたのですが、それでは具体的な行動には
到達できません。
ですので、急遽その場で、じゃあその目標に向かうにはどういうことをすれば良いかを
挙げてもらいました。</p>

<p>最終的に、あるべき姿は覚えておいてもらいつつ、
具体的な行動ひとつを選択してもらい、それを実践してもらうよう後押しする、
という風にすることで、無事にセッションが着地できたかなと思います。</p>

<h2>タイムキープ重要</h2>

<p>1時間のセッションと事前に決めていたのですが、その中で40分は質問。
残り20分で具体的な行動への話に繋げていったのですが、
上記のような急遽の話があり、最後の具体的な行動の時間がギリギリになってしまい、
具体的な行動のリストアップを途中で打ち切ってしまうかたちになってしまいました。
これはアイデアを摘んでしまうことになるので、良くないです。
コーチ側のタイムキープの力が問われます。</p>

<h2>前もって準備した質問が多すぎた？</h2>

<p>どちらかと言うと、質問の数は少なめにして、逆に「他には？」「具体的には？」などと
色々出してもらったほうが良かったかもしれません。
キャリアのことを考える上で色んな視点があった方がいいと思い、
質問の数を多めにしたのですが、深く聞けたかどうかはちょっと自信がないですね…。
これはクライアントさんに別途聞いてみようかと思います。</p>

<p>初めての実践コーチングの自己フィードバックでした。</p>

<h1>ロールモデルの存在</h1>

<p>最後に、ロールモデルの存在について。
上のほうで何となく「参考にする人物像」と書いたのですが、
<a href="http://kotobank.jp/word/%E3%83%AD%E3%83%BC%E3%83%AB%E3%83%A2%E3%83%87%E3%83%AB">ロールモデル とは &ndash; コトバンク</a>によると、</p>

<blockquote><p>具体的な行動技術や行動事例を模倣・学習する対象となる人材</p></blockquote>

<p>だそうです
(実はロールモデルの定義をちゃんと知らずこの言葉を使っていた…反省)。</p>

<p>ロールモデルとなる方は、どのくらい自分から離れた存在なのが良いのかな、と
セッション後に考えてみた次第です。
例えば、新人のロールモデルが課長、みたいなケースだと、
ちょっとロールモデルとするには距離感がありすぎる気がするんですね。
新人さんが模倣しようにも、上司とは業務内容から視点から色々異なるので、
参考にしにくいのではないか？思うわけです。
逆に近すぎると、それはそれでロールモデルとしては適切ではないのかな、とも思います。
参考にすると言うよりは、ライバル的な関係となり切磋琢磨するのが良いのかなと、何となく思います。</p>

<p>そう考えると、程よく離れた関係がロールモデルとして適切なのかと思うのですが、
さてさてこの「程よく離れた」って実際にはどのくらい？というのが分からない。
何か指標みたいなのがあればいいんですけどね。まだ調べていないので、分からないです。</p>

<p>話を戻してクライアントさんですが、今はクライアントさんの上にも下にも
バラエティに富んだチームメンバーがいます。
そういう環境では、ロールモデルとなる人を見つけやすいと思いますし、
実際にいるとのことなので、何よりだと思います。</p>

<p>そのクライアントさんだけに限らず、他のメンバーがどういう人をロールモデルとして
捉えているのか、その距離感はどんなものなのか、この辺を注目していこうと思います。</p>

<h1>最後にコーチングについて</h1>

<p>コーチング研修の先生は、何度も「答えはクライアントの中にある」と仰っていました。
何回かの演習と今日の実践を踏まえて、仰っていることは本当なのだと思います。
今回の実践は私も非常に勉強になりましたので、引き続き実践していく予定です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonで線形方程式を解く]]></title>
    <link href="http://todoa2c.github.io/blog/2014/03/04/linear-equations-in-python/"/>
    <updated>2014-03-04T18:55:50+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/03/04/linear-equations-in-python</id>
    <content type="html"><![CDATA[<p><a href="http://www.checkio.org/mission/how-much-gold/">How much gold :: CheckiO</a>を解く方法として、
何か簡単な方法はあるんだろうなと思いながら、線形方程式を解く方法を採用したわけです。</p>

<p>線形方程式を簡単に解く方法はないかな？と探したところ、
<a href="http://sympy.org/">SymPy</a>を使って式を与えるだけで解くことが出来ました。
テストその1をベタ書きしています。</p>

<p>ソースコードおよびセットアップ方法は、
<a href="http://qiita.com/ryosy383/items/e5e2ecb5976f98040d21">Pythonを使って一瞬で連立方程式を解く &ndash; Qiita</a>
を参考にしています。
要するに、右辺がゼロとなる方程式を、連立方程式を解くのに必要な分渡しているわけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from fractions import Fraction
</span><span class='line'>from sympy import *
</span><span class='line'>
</span><span class='line'>g, t, i, c = symbols('g t i c')
</span><span class='line'>out = solve([
</span><span class='line'>    g * Fraction(1, 1) + t * Fraction(1, 1) - Fraction(1, 2),
</span><span class='line'>    g * Fraction(1, 1) + i * Fraction(1, 1) - Fraction(1, 3),
</span><span class='line'>    g * Fraction(1, 1) + c * Fraction(1, 1) - Fraction(1, 4),
</span><span class='line'>    g * Fraction(1, 1) + t * Fraction(1, 1) + i * Fraction(1, 1) + c * Fraction(1, 1) - Fraction(1, 1),
</span><span class='line'>], [g, t, i, c])
</span><span class='line'>
</span><span class='line'>out[g]  # -&gt; Fraction(1, 24)</span></code></pre></td></tr></table></div></figure>


<p>ただ、CheckiOでは外部ライブラリの利用はできません。
また、式を動的に生成する方法があるかも分かりませんので、
複数ケースに対応する方法が分かりませんでした。</p>

<p>結局、
<a href="http://ja.wikipedia.org/wiki/%E3%82%AC%E3%82%A6%E3%82%B9%E3%81%AE%E6%B6%88%E5%8E%BB%E6%B3%95">ガウスの消去法 &ndash; Wikipedia</a>
を使って、自前実装で解くことにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def gauss_elimination(m):
</span><span class='line'>    '''mは[g, t, i, c, value]というベクトルを4本持つ行列'''
</span><span class='line'>    n = len(m)
</span><span class='line'>    # 前進消去
</span><span class='line'>    for i in range(n):
</span><span class='line'>        v = m[i][i]
</span><span class='line'>        if v == 0:
</span><span class='line'>            # ゼロ以外の値を持つ行と交換する
</span><span class='line'>            for k in range(i + 1, n):
</span><span class='line'>                if m[k][i] != 0:
</span><span class='line'>                    m[i], m[k] = m[k], m[i]
</span><span class='line'>                    v = m[i][i]
</span><span class='line'>                    break
</span><span class='line'>        for j in range(n + 1):
</span><span class='line'>            m[i][j] /= v
</span><span class='line'>        for k in range(i + 1, n):
</span><span class='line'>            v = -m[k][i]
</span><span class='line'>            for j in range(n + 1):
</span><span class='line'>                m[k][j] += m[i][j] * v
</span><span class='line'>
</span><span class='line'>    # 後退代入
</span><span class='line'>    for i in range(n-1, 0, -1):
</span><span class='line'>        v = m[i][i]
</span><span class='line'>        m[i][i] /= v
</span><span class='line'>        m[i][n] /= v
</span><span class='line'>        for k in range(i - 1, -1, -1):
</span><span class='line'>            v2 = m[k][i] * m[i][n]
</span><span class='line'>            m[k][n] -= v2
</span><span class='line'>            m[k][i] = Fraction(0, 1)
</span><span class='line'>    return m</span></code></pre></td></tr></table></div></figure>


<p>これで<code>gauss_elimination()</code>が解けたときにはすべての変数の値が求められた状態になります。
良かった良かった。</p>

<p>…と思ったら、最短1行で書くことができるらしい。
<code>G+T=a, G+I=b, G+C=c, G+T+I+C=1</code>から、<code>G = (a + b + c - 1) / 2</code>が導出できて、
a, b, cを、それぞれGが含まれている場合の式に変換することで計算できると
(テスト2の方は、1 &ndash; 式とすればGが含まれる方になる)。
なるほど、勉強になりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪Pythonユーザの集まり 2014/03 を募集開始しました '#osakapy]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/28/osaka-python-study-session/"/>
    <updated>2014-02-28T11:43:01+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/28/osaka-python-study-session</id>
    <content type="html"><![CDATA[<p>前回の記事で書きました、大阪でPythonの勉強会を行う、という話ですが、
本日ようやく募集開始しました。</p>

<p><a href="http://connpass.com/event/5361/">大阪Pythonユーザの集まり 2014/03 &ndash; connpass</a></p>

<ul>
<li>日時 2014/03/13 19:00</li>
<li>場所 堂島アバンザ21F</li>
</ul>


<p>Pythonユーザはもちろんのこと、
Pythonに興味を持っていただいている方のご参加もお待ちしております。</p>

<p>今時点では、下記3名が発表予定です。私も参加します。</p>

<ul>
<li><a href="https://twitter.com/whosaysni">@whosaysni</a> wxPythonの初心者向けのお話(仮) 15分</li>
<li><a href="https://twitter.com/todogzm">@todogzm</a> scikit-learnを用いた機械学習チュートリアル 30分</li>
<li><a href="https://twitter.com/heavenshell">@heavenshell</a> タイトル未定 10～15分</li>
</ul>


<p>また、当初の予定にはなかったのですが、とりあえずLT枠も作ってみました。
誰か少しでも発表できることがありましたら、ご参加をお待ちしております。
個人的にはPython 3.4の新機能を話せる人がいたら、ひとつピックアップして
お話いただけると嬉しい次第です。</p>

<p>懇親会も行う予定ですので、こちらも是非ご参加ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関西のIT関連の勉強会・コミュニティ一覧を作ってみた]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/25/kansai-it-communities/"/>
    <updated>2014-02-25T16:58:10+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/25/kansai-it-communities</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/nowokay/20140225#1393294814">コミュニティに入るか入らないかでエンジニアとしての幸福度がかわる &ndash; きしだのはてな</a>がホッテントリ入りしていたので、読んでみました。
幸せの評価基準をバシッと1コに決めてしまう当たりに賛否両論はあるのかもしれませんが、
少なくとも私は同意するところが多々あります。
エンジニアですもの、技術力が上がることは成長しているってことで、嬉しいわけですよね。</p>

<p><a href="http://doda.jp/engineer/guide/yosoku/06_1.html">計算機科学者、未踏統括PM 竹内郁雄が語るエンジニアに伝えたいこと | 三年予測 ｜IT・Web業界の転職ならDODAエンジニア IT</a>にも、下記のような話がありました。</p>

<blockquote><p>「閉塞状況から脱出したいなら、コミュニティだ。それも、単に勉強会とかフォーラムに参加して情報を吸収するだけではなく、他人と交わることだ。できれば懇親会まで出て、人との交流を楽しんだほうがいい」</p></blockquote>

<p>コミュニティには、似たようなものを作っている人や、まったく違うものを作っている人、
様々なキャリアの人がいて、その人達と情報交換することにより、
自分の知らなかった情報を得ることが出来ます。
今まで知らなかったことを、存在だけでも知ることができれば、
あとは自分で調べることができるようになります。
これがコミュニティに参加する、一番最初に得られるメリットだと思います。</p>

<p>とは言え、関西でコミュニティをどうやって探したらいいのか分からん、とゴネられても困るので、
<a href="http://qiita.com/todogzm/items/c26aab6caa59d081d4f4">関西のIT関連の勉強会・コミュニティ一覧 &ndash; Qiita</a>を作ってみました。
不足やカテゴリ変更など色々ツッコミたい部分はあると思いますので、
是非コメントなり編集リクエストなりをお送りください。
よろしくお願いします。</p>

<p>なお、3月第2週くらいに、大阪でPythonの勉強会を企画中です。
<a href="http://todoa2c.github.io/blog/2014/02/19/osaka-python-meeting/">大阪でPythonで集まろうの巻に参加した &ndash; 技術情報棚卸し(平日限定)</a>から上がった企画ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CheckiOでPythonのお勉強]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/24/study-with-checkio/"/>
    <updated>2014-02-24T19:47:30+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/24/study-with-checkio</id>
    <content type="html"><![CDATA[<p><a href="http://www.checkio.org/">CheckiO</a>が楽しいので、少しずつクリアしています。</p>

<p>CheckiOはPythonを使ったプログラミング学習サービスなのですが、
ゲーム要素溢れるところが非常に特徴的です。</p>

<p>ゲーム要素は、例えばこんな感じです。
私自身のPython歴がそれほど長くないので、人のコードを読むのは非常に勉強になります。</p>

<ul>
<li>サインアップするためにもPythonコードを書く必要がある</li>
<li>コードを書くことによって経験値が得られ、バッジや行ける場所が増える(行ける先はO&#8217;ReillyとかDropboxなどという見慣れた名前が…)</li>
<li>コードの提出が完了したら、自分の書いたコードを公開できる(経験値ももらえるしレビューももらえる)</li>
<li>人のコードを読むことが出来、レビューすることができる(レビューすると経験値がもらえる)</li>
</ul>


<p>サイトが重いとか、作りが分かりにくいとか不満点は少々ありますが、
パズルを解く感覚でPythonを学ぶ事ができるのは、非常に楽しいです。
下記が私のアカウントですので、よかったら私をフォローして下さい。</p>

<p><a href="http://www.checkio.org/user/todogzm/">todogzm profile  :: CheckiO</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sexy Little Numbersの和訳の賞味期限が短い件]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/20/sexy-little-numbers/"/>
    <updated>2014-02-20T19:43:20+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/20/sexy-little-numbers</id>
    <content type="html"><![CDATA[<p><a href="http://www.ogilvy.co.jp/sln/">データ・サイエンティストに学ぶ「分析力」</a>という本を読みました。
マーケティングに関するサービスを開発している割にマーケティングのことについて
あまり知識がないことに気付くというしょうもない状態だったので、
この本で学習しようとしたわけです
(一応言い訳ですが、マーケティング周り担当になったのはここ最近の話！)。
割と厚い本であるし初学者でもあるので、まずは分からない点も含めてざっと読みしました。</p>

<h1>マーケティングの流れ</h1>

<ol>
<li>誰にアプローチするかを決める</li>
<li>どのようなメッセージを送るかを決める</li>
<li>客がどこに居るかを探す</li>
<li>プロモーションにいくら使うかを決める</li>
<li>実際にプロモーションし、結果を測定する</li>
<li>測定結果をもとに、次の行動を最適化する</li>
</ol>


<p>という流れとのこと。で、本書はこの各行動について、
手元にあるデータを頼りにした(またはデータが揃ってない場合には直感なども頼りにした)
適切なアプローチを取ります。</p>

<h1>適切なアプローチ方法</h1>

<p>例えば誰にアプローチするかについては、既存顧客を分類して、
どういう顧客層が「価値のある顧客となりうるか」「価値のありそうな潜在顧客か」
などに割り振ります(バリュースペクトラムモデル)。
その際の「価値」についても、自分の商品・マーケットにそって、
色々な尺度があり、それをどのように計算するかが書かれているわけです。</p>

<p>各フェーズについて、データからどのようにアプローチするか、
データがない場合はどうするかが書かれており、非常に有用に感じました。
まだ分かってない点も多々あるので、今度は深く読もうと思います。</p>

<h1>本を読んで</h1>

<p>マーケティングの仕方が分かり、マーケティングサービスに
組み込んでいくためのアイデアをいくつももらえた気がします。
逆に言うと、いくつも基本的なことが出来ていなかったと思います。反省しきりです…。</p>

<p>また、マーケティングに関わる分析の未来についても書かれており、
ワクワクする反面、不安になる点もいくつかありました。
詳細は本を手にとって読んでみてください。</p>

<h1>最後に</h1>

<p>「データ・サイエンティスト」って賞味期限の短そうな名前をタイトルに使うと
今はいいけど数年後には誰も見向きもしない本に成り下がってしまわないか、
ちょっと気がかりです。
10年くらいは有用な本だと思ったので、その点が残念かなぁと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪でPythonで集まろうの巻に参加した]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/19/osaka-python-meeting/"/>
    <updated>2014-02-19T11:01:19+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/19/osaka-python-meeting</id>
    <content type="html"><![CDATA[<h1>背景</h1>

<p><a href="http://connpass.com/event/5201/">大阪でPythonで集まろうの巻</a>に参加してきました。
参加してきましたというか、上記リンクの先を見ていただくとお分かりの通り、発端は私です。
私なんですが、恐れ多くも増田さんにボールをぶん投げ、企画していただいたという次第です。</p>

<p>私自身Pythonを初めて1年半。
実際にそれなりの時間を割いて書くようになってきたのがここ数ヶ月くらいの話なのですが、
私の周囲にPythonを書く人がいないんですね(最近少しだけ書く人が増えたけど)。
Pythonについて相談できる相手がいないわけで、少々つらいこともあるわけです。
そういう背景もあって関西のPythonコミュニティを探していたわけですが、
ここ数年の活動は停滞気味だったとのことでした。</p>

<p>まずはテーマとかないけれど、Pythonな人たちで顔合わせしましょうかね、
合わせて勉強会とか開発合宿とか企画したいね、という感じで企画されたのが今回の会合です。
増田さん、お忙しい中企画と会場をご提供いただき、ありがとうございます。</p>

<h1>会合</h1>

<p>会合ですが、各人の自己紹介を経て、勉強会のざっくり方針だけを決めて、
会合自体は30分で終わり懇親会場になだれ込みましたｗ</p>

<h1>メモ</h1>

<p>以下はメモ。時系列などは無視のだらだら箇条書きです。</p>

<ul>
<li>大阪にはPythonの仕事もGoの仕事もある！</li>
<li>ミッション・クリティカルなシステムにもPythonが使われており、構成次第では非常に大量のアクセスもさばける模様。</li>
<li>Erlangの軽量プロセスの管理がGoよりも充実しており、子プロセス生成時に、子プロセスが異常終了した場合にどのように通知して親プロセスはそのまま生存するか一緒に終了するかの制御を明示的に指定できるらしい。

<ul>
<li>Erlang開発者の論文に、システムがどういう状況で障害を起こすのか、その対策は、という話が書かれているらしい。多分これっぽい。<a href="http://www.erlang.org/download/armstrong_thesis_2003.pdf">armstrong_thesis_2003.pdf</a></li>
</ul>
</li>
<li>Seleniumのドライバーに、<a href="https://pypi.python.org/pypi/selenium/">Python用のSelenium Driver</a>がある。うちもJavaじゃなくてPythonを使ったほうがサクサク書けるんじゃないかな。</li>
<li>スプリント・バックログを付箋化するのはひと目で分かって良い。ただチケットも別途発行しており、そのチケットが溢れる問題は解決しない。</li>
<li>Web界隈だとGitHubでTravisCIで～という話をよく聞くが、CIも自動テストもない現場が普通にあるとのこと。おっとSVNの悪口はそこまでだ orz</li>
<li>勉強会の運営についても幾つか。

<ul>
<li>会場の確保は、20～40人規模なら何とかなりそう。会場提供可能な方が結構多くてビックリ。</li>
<li>開催日は、平日か土日かといえば、どちらかだけ都合がいいという人が一定数いる関係上、交互にやった方がいいんじゃないか。</li>
<li>勉強会には参加する人は多いが発表してくれる人はかなり限られる。発表の敷居を下げるか、強制で発表できるような仕組みが必要？</li>
<li>発表する側、企画する側も何らかの成果を得たい。案として、グループディスカッション形式の勉強会があっても面白いかもしれない。</li>
</ul>
</li>
</ul>


<p>最後に。大阪でPythonの勉強会を開催予定です。3月第2週あたりを予定しております。</p>

<p>あぁぁ大阪Go勉強会もこんな感じでいい加減踏ん切りつけてやらないと… orz
コミュニティ化しないといかんなぁ…。</p>

<p>こちらからは以上です。皆様、昨日はありがとうございました！</p>

<h1>そう言えば。</h1>

<p>妻の同級生が居て腰抜かしそうになるほどびっくりしました。
世の中広いようで、狭いです。</p>

<h1>追記 2014-02-19 12:55</h1>

<p><a href="https://twitter.com/ikegami__">@ikegami__</a>さんから教えていただいたのですが、
Python for Kidsという本の訳本が今月末発売予定とのことです。</p>

<p><a href="http://ssl.ohmsha.co.jp/cgi-bin/menu.cgi?ISBN=978-4-274-06944-4">たのしいプログラミング　Pythonではじめよう！</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サイボウズLiveを試用する]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/17/cybozu-live-trial/"/>
    <updated>2014-02-17T19:24:53+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/17/cybozu-live-trial</id>
    <content type="html"><![CDATA[<p><a href="http://todoa2c.github.io/blog/2014/02/12/email-one-more-suck/">Emailがコラボレーションツールに適していないもう1点</a>で書いたことを実践する機会ができまして。
諸事情により地域の会合に参加することになったのですが、
そこでの議論の結果がメールで回されることになりそうだったのです。
Emailはコラボレーションツールに適してないと主張する私としては
黙って見ているわけにはいきません。</p>

<p>「メールでのやりとりは議論が残せないので、別の場所を設けましょう。私が提案します！」</p>

<p>と手を上げて、実際に導入するところまでを面倒見ることにしました。</p>

<h1>評価ポイント</h1>

<p>今回の地域の会合で、ある程度PCやスマホに慣れている男性陣が想定利用者です。
評価ポイントは、ざっくり以下としました。</p>

<ul>
<li>無料である(まだ予算とかないので…)</li>
<li>セキュアである</li>
<li>スケジュール、議事録、TODO管理ができる</li>
<li>スマホ対応している</li>
</ul>


<p>こういう条件で、限られた時間内で調べてみました。</p>

<h1>評価対象</h1>

<ul>
<li><a href="https://live.cybozu.co.jp/">サイボウズLive</a></li>
<li><a href="https://groups.google.com/forum/?hl=ja#!overview">Googleグループ</a></li>
<li><a href="http://ja.youroom.in/">youroom</a></li>
<li><a href="https://www.atlassian.com/ja/software/confluence">Confluence</a></li>
</ul>


<p>この中で、サイボウズLiveを第1候補としました。
上記の評価ポイントをすべて押さえているからです。</p>

<p>というわけで、サイボウズLiveに登録し、実際に試用してもらうことにしました。
まだ1日しか経っていませんが、果たしてどうなることやら。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App EngineのDatastoreについて調査中]]></title>
    <link href="http://todoa2c.github.io/blog/2014/02/14/appengine-datastore-references/"/>
    <updated>2014-02-14T17:23:07+09:00</updated>
    <id>http://todoa2c.github.io/blog/2014/02/14/appengine-datastore-references</id>
    <content type="html"><![CDATA[<p>Google App EngineのDatastore周りを学習すべく、いくつか参考にしたサイトをまとめておきます。</p>

<ul>
<li><p><a href="http://www.slideshare.net/devsumi/18c4google-app-engine-6969798">【18-C-4】Google App Engine &ndash; 無限の彼方へ</a></p>

<ul>
<li>Google松尾さんによる資料。2011年と古いが、Datastoreについての概要はここで学べると思う。</li>
</ul>
</li>
<li><p><a href="http://appengine.keicode.com/gae/datastore.php">データストア &ndash; Google App Engine 入門</a></p>

<ul>
<li>Python, Javaの両方について記事がある模様。入門とだけあって分かりやすい気がする。</li>
</ul>
</li>
<li><p><a href="http://proppy-appstats.appspot.com/">Google I/O 2012 &ndash; Optimizing Your Google App Engine App</a></p>

<ul>
<li>つい先程見つけたばかりなので確認中。解説はこちらも見たほうがよいのかな。</li>
<li><a href="http://blog.vier.jp/2013/02/google-app-engine-appengine-ja-night-23.html">Blog @vierjp : 18.Google App Engineパターン (appengine ja night #23)</a></li>
</ul>
</li>
<li><p><a href="https://developers.google.com/appengine/docs/go/datastore/">Go Datastore API &ndash; Google App Engine &ndash; Google Developers</a></p>

<ul>
<li>本家。Go版についてはやっぱりここを見ないと話にならないと思う。キーの設定方法が他のオブジェクト指向言語とどのように違うのかがようやく分かった(あくまで気がするレベル)。</li>
</ul>
</li>
</ul>


<p>まぁ雰囲気だけ掴んだ感じで、まだよく分かってないことが多いです。
土日に実際にDatastoreを使った実装に入ってみようかと思います。</p>

<h1>余談</h1>

<p>余談ですが、何故かF-SecureにGoソースコードのコンパイルをことごとく邪魔されるので、
私物Macで同様の環境を構築しました。
当初の話の通り、いちいちサーバーを再起動せずに変更が追従されるのがいいですね。</p>

<p>思えば私のWindows環境だと、64bit版Goコンパイラがコンパイル直後に落ちるので、
色々おかしいのかもしれないです。
Windows Updateも失敗しまくるし…環境を作り直して1年経ってないのに、また環境の作り直しか…</p>
]]></content>
  </entry>
  
</feed>
